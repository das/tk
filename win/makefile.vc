#------------------------------------------------------------------------------
# makefile.vc --
#
#	Microsoft Visual C++ makefile for use with nmake.exe v1.62+ (VC++ 5.0+)
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# Copyright (c) 1995-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-2000 Ajuba Solutions.
# Copyright (c) 2001 ActiveState Corporation.
# Copyright (c) 2001 Tomasoft Engineering.
#
#------------------------------------------------------------------------------
# RCS: @(#) $Id$
#------------------------------------------------------------------------------

!if "$(MSVCDIR)" == ""
MSG = ^
You'll need to run vcvars32.bat from Developer Studio, first, to setup^
the environment.  Jump to this line to read the new instructions.
!error $(MSG)
!endif

#------------------------------------------------------------------------------
# HOW TO USE this makefile:
#
# 1)  It is now necessary to have MSVCDir set in the environment.  This is used
#     as a check to see if vcvars32.bat had been run prior to running nmake or
#     during the install of Microsoft Developer Studio, MSVCDir had been set
#     globally and the PATH adjusted.  Either way is valid.
#
#     You'll need to run vcvars32.bat contained in the MsDev's vc(98)/bin
#     directory to setup the proper environment, if needed, for your current
#     setup.  This is a needed bootstrap requirement and allows the swapping of
#     different environments to be easier.
#
# 2)  To use the Platform SDK (not expressly needed), run setenv.bat after
#     vcvars32.bat according to the instructions for it.  This can also turn on
#     the 64-bit compiler, if your SDK has it.
#
# 3)  Targets are:
#	release  -- builds the core, the shell and the dlls. (default)
#	dlls     -- just builds the windows extensions and the 16-bit DOS
#		    pipe/thunk driver.
#	shell    -- Just builds the shell and the core.
#	core     -- Only builds the core.
#	all      -- builds everything.
#	test     -- builds and runs the test suite.
#	tcltest  -- just builds the binaries for the test suite.
#	install  -- installs the built binaries and libraries to $(INSTALLDIR)
#		    as the root of the install tree.
#	plugin   -- [currently out-dated].
#	clean    -- removes the contents of $(TMP_DIR)
#	hose     -- removes the contents of $(TMP_DIR) and $(OUT_DIR)
#	genstubs -- rebuilds the Stubs table and support files (dev only).
#	winhelp  -- builds the windows .hlp file for Tcl from the troff man
#		    files.
#
# 4)  Macros usable on the commandline:
#	TCLDIR=<path>
#		Sets the location for where to find the Tcl headers and
#		libraries.  The install point is assumed when not
#		specified.  This can be the source tree or an installation.
#
#	INSTALLDIR=<path>
#		Sets where to install Tcl from the built binaries.
#		C:\Progra~1\Tcl is assumed when not specified.
#
#	OPTS=static,msvcrt,threads,symbols,profile,none
#		Sets special options for the core.  The default is for none.
#		Any combination of the above may be used (comma separated).
#		'none' will over-ride everything to nothing.
#
#		static  =  Builds a static library of the core instead of a
#			   dll.  The shell will be static (and large), as well.
#		msvcrt  =  Effects the static option only to switch it from
#			   using libcmt(d) as the C runtime [by default] to
#			   msvcrt(d). This is useful for static embedding
#			   support.
#		linkexten = Effects the static option only to switch
#			   tclshXX.exe to have the dde and reg extension linked
#			   inside it.
#		threads =  Turns on full multithreading support.
#		symbols =  Adds symbols for step debugging.
#		profile =  Adds profiling hooks.  Map file is assumed.
#
#	STATS=memdbg,compdbg,none
#		Sets optional memory and bytecode compiler debugging code added
#		to the core.  The default is for none.  Any combination of the
#		above may be used (comma separated).  'none' will over-ride
#		everything to nothing.
#
#		memdbg   = Enables the debugging memory allocator.
#		compdbg  = Enables byte compilation logging.
#
#	MACHINE=(IX86|IA64|ALPHA)
#		Set the machine type used for the compiler, linker, and
#		resource compiler.  This hook is needed to tell the tools
#		when alternate platforms are requested.  IX86 is the default
#		when not specified.
#
#	TMP_DIR=<path>
#	OUT_DIR=<path>
#		Hooks to allow the intermediate and output directories to be
#		changed.  $(OUT_DIR) is assumed to be 
#		$(BINROOT)\(Release|Debug) based on if symbols are requested.
#		$(TMP_DIR) will de $(OUT_DIR)\<buildtype> by default.
#
#	TESTPAT=<file>
#		Reads the tests requested to be run from this file.
#
# 5)  Examples:
#
#	Basic syntax of calling nmake looks like this:
#	nmake [-nologo] -f makefile.vc [target|macrodef [target|macrodef] [...]]
#
#                        Standard (no frills)
#       c:\tk_src\win\>c:\progra~1\micros~1\vc98\bin\vcvars32.bat
#       Setting environment for using Microsoft Visual C++ tools.
#       c:\tk_src\win\>nmake -f makefile.vc release
#       c:\tk_src\win\>nmake -f makefile.vc install INSTALLDIR=c:\progra~1\tcl
#
#                         Building for Win64
#       c:\tk_src\win\>c:\progra~1\micros~1\vc98\bin\vcvars32.bat
#       Setting environment for using Microsoft Visual C++ tools.
#       c:\tk_src\win\>c:\progra~1\platfo~1\setenv.bat /pre64 /RETAIL
#       Targeting Windows pre64 RETAIL
#       c:\tk_src\win\>nmake -f makefile.vc MACHINE=IA64
#
#     I've found the following batchfile useful for building everything:
#
#	if "%MSVCDir%" == "" call c:\progra~1\micros~1\vc98\bin\vcvars32.bat
#	set INSTALLDIR=C:\tclTestArea
#	nmake -nologo -f makefile.vc release winhelp
#	nmake -nologo -f makefile.vc release   OPTS=static,linkexten      TCLDIR=%1
#	nmake -nologo -f makefile.vc core dlls OPTS=static,msvcrt         TCLDIR=%1
#	nmake -nologo -f makefile.vc core      OPTS=static,threads        TCLDIR=%1
#	nmake -nologo -f makefile.vc core      OPTS=static,msvcrt,threads TCLDIR=%1
#	nmake -nologo -f makefile.vc shell     OPTS=threads               TCLDIR=%1
#	pause
#
#
#------------------------------------------------------------------------------
#==============================================================================
###############################################################################


#    //==================================================================\\
#   >>[               -> Do not modify below this line. <-               ]<<
#   >>[  Please, use the commandline macros to modify how Tcl is built.  ]<<
#   >>[  If you need more features, send us a patch for more macros.     ]<<
#    \\==================================================================//


###############################################################################
#==============================================================================
#------------------------------------------------------------------------------

!if !exist("makefile.vc")
MSG = ^
You must run this makefile only from the directory it is in.^
Please `cd` to its location first.
!error $(MSG) 
!endif

PROJECT	= tk
!include "rules.vc"

!if !defined(TCLDIR)
!if exist($(INSTALLDIR)\include\tcl.h)
TCLINSTALL	= 1
TCLDIR		= $(INSTALLDIR)
!else
!error Don't know where tcl.h is.  Set the TCLDIR macro.
!endif
!else
!if exist($(TCLDIR)\include\tcl.h)
TCLINSTALL	= 1
!elseif exist($(TCLDIR)\generic\tcl.h)
TCLINSTALL	= 0
!else
!error Don't know where tcl.h is.  the TCLDIR macro doesn't appear correct.
!endif
!endif

STUBPREFIX = $(PROJECT)stub
DOTVERSION = 8.4
VERSION = $(DOTVERSION:.=)
WISHNAMEPREFIX = wish

BINROOT		= .
ROOT		= ..

TCLIMPLIBNAME	= tcl$(VERSION)$(SUFX).lib
TCLLIBNAME	= tcl$(VERSION)$(SUFX).$(EXT)
TCLSTUBLIBNAME	= tclstub$(VERSION).lib

TKIMPLIB	= $(OUT_DIR)\$(PROJECT)$(VERSION)$(SUFX).lib
TKLIBNAME	= $(PROJECT)$(VERSION)$(SUFX).$(EXT)
TKLIB		= $(OUT_DIR)\$(TKLIBNAME)

TKSTUBLIBNAME	= $(STUBPREFIX)$(VERSION).lib
TKSTUBLIB	= $(OUT_DIR)\$(TKSTUBLIBNAME)

!if $(TCLINSTALL)
TCLSH		= $(INSTALLDIR)\bin\$(TCLNAMEPREFIX)sh$(VERSION)$(SUFX).exe
TCLSTUBLIB	= $(INSTALLDIR)\lib\$(TCLSTUBLIBNAME)
TCLIMPLIB	= $(INSTALLDIR)\lib\$(TCLIMPLIBNAME)
TCL_LIBRARY	= $(INSTALLDIR)\lib
!else
TCLSH		= $(TCLDIR)\win\$(BUILDDIRTOP)\$(TCLNAMEPREFIX)sh$(VERSION)$(SUFX).exe
TCLSTUBLIB	= $(TCLDIR)\win\$(BUILDDIRTOP)\$(TCLSTUBLIBNAME)
TCLIMPLIB	= $(TCLDIR)\win\$(BUILDDIRTOP)\$(TCLIMPLIBNAME)
TCL_LIBRARY	= $(TCLDIR)\library
!endif

WISH 		= $(OUT_DIR)\$(WISHNAMEPREFIX)$(VERSION)$(SUFX).exe
WISHC 		= $(OUT_DIR)\$(WISHNAMEPREFIX)c$(VERSION)$(SUFX).exe

#TKHLPBASE	= $(PROJECT)$(VERSION)
#TKHLP		= $(OUT_DIR)\$(TKHLPBASE).hlp
#TKHLPCNT	= $(OUT_DIR)\$(TKHLPBASE).cnt

TKTEST		= $(OUT_DIR)\$(PROJECT)test.exe
CAT32		= $(OUT_DIR)\cat32.exe
RMDIR		= .\rmd.bat
MKDIR		= .\mkd.bat
RM		= del

LIB_INSTALL_DIR		= $(INSTALLDIR)\lib
BIN_INSTALL_DIR		= $(INSTALLDIR)\bin
DOC_INSTALL_DIR		= $(INSTALLDIR)\doc
SCRIPT_INSTALL_DIR	= $(INSTALLDIR)\lib\tcl$(DOTVERSION)
INCLUDE_INSTALL_DIR	= $(INSTALLDIR)\include

WISHOBJS = \
	$(TMP_DIR)\winMain.obj \
	$(TMP_DIR)\wish.res

TKTESTOBJS = \
	$(TMP_DIR)\tkTest.obj \
	$(TMP_DIR)\tkSquare.obj \
	$(TMP_DIR)\testMain.obj \
	$(TMP_DIR)\tkWinTest.obj \
	$(TCLLIBDIR)\tclThreadTest.obj

XLIBOBJS = \
	$(TMP_DIR)\xcolors.obj \
	$(TMP_DIR)\xdraw.obj \
	$(TMP_DIR)\xgc.obj \
	$(TMP_DIR)\ximage.obj \
	$(TMP_DIR)\xutil.obj

TKOBJS = \
	$(TMP_DIR)\tkConsole.obj \
	$(TMP_DIR)\tkUnixMenubu.obj \
	$(TMP_DIR)\tkUnixScale.obj \
	$(XLIBOBJS) \
	$(TMP_DIR)\tkWin3d.obj \
	$(TMP_DIR)\tkWin32Dll.obj \
	$(TMP_DIR)\tkWinButton.obj \
	$(TMP_DIR)\tkWinClipboard.obj \
	$(TMP_DIR)\tkWinColor.obj \
	$(TMP_DIR)\tkWinConfig.obj \
	$(TMP_DIR)\tkWinCursor.obj \
	$(TMP_DIR)\tkWinDialog.obj \
	$(TMP_DIR)\tkWinDraw.obj \
	$(TMP_DIR)\tkWinEmbed.obj \
	$(TMP_DIR)\tkWinFont.obj \
	$(TMP_DIR)\tkWinImage.obj \
	$(TMP_DIR)\tkWinInit.obj \
	$(TMP_DIR)\tkWinKey.obj \
	$(TMP_DIR)\tkWinMenu.obj \
	$(TMP_DIR)\tkWinPixmap.obj \
	$(TMP_DIR)\tkWinPointer.obj \
	$(TMP_DIR)\tkWinRegion.obj \
	$(TMP_DIR)\tkWinScrlbr.obj \
	$(TMP_DIR)\tkWinSend.obj \
	$(TMP_DIR)\tkWinWindow.obj \
	$(TMP_DIR)\tkWinWm.obj \
	$(TMP_DIR)\tkWinX.obj \
	$(TMP_DIR)\stubs.obj \
	$(TMP_DIR)\tk3d.obj \
	$(TMP_DIR)\tkArgv.obj \
	$(TMP_DIR)\tkAtom.obj \
	$(TMP_DIR)\tkBind.obj \
	$(TMP_DIR)\tkBitmap.obj \
	$(TMP_DIR)\tkButton.obj \
	$(TMP_DIR)\tkCanvArc.obj \
	$(TMP_DIR)\tkCanvBmap.obj \
	$(TMP_DIR)\tkCanvImg.obj \
	$(TMP_DIR)\tkCanvLine.obj \
	$(TMP_DIR)\tkCanvPoly.obj \
	$(TMP_DIR)\tkCanvPs.obj \
	$(TMP_DIR)\tkCanvText.obj \
	$(TMP_DIR)\tkCanvUtil.obj \
	$(TMP_DIR)\tkCanvWind.obj \
	$(TMP_DIR)\tkCanvas.obj \
	$(TMP_DIR)\tkClipboard.obj \
	$(TMP_DIR)\tkCmds.obj \
	$(TMP_DIR)\tkColor.obj \
	$(TMP_DIR)\tkConfig.obj \
	$(TMP_DIR)\tkCursor.obj \
	$(TMP_DIR)\tkEntry.obj \
	$(TMP_DIR)\tkError.obj \
	$(TMP_DIR)\tkEvent.obj \
	$(TMP_DIR)\tkFileFilter.obj \
	$(TMP_DIR)\tkFocus.obj \
	$(TMP_DIR)\tkFont.obj \
	$(TMP_DIR)\tkFrame.obj \
	$(TMP_DIR)\tkGC.obj \
	$(TMP_DIR)\tkGeometry.obj \
	$(TMP_DIR)\tkGet.obj \
	$(TMP_DIR)\tkGrab.obj \
	$(TMP_DIR)\tkGrid.obj \
	$(TMP_DIR)\tkImage.obj \
	$(TMP_DIR)\tkImgBmap.obj \
	$(TMP_DIR)\tkImgGIF.obj \
	$(TMP_DIR)\tkImgPPM.obj \
	$(TMP_DIR)\tkImgPhoto.obj \
	$(TMP_DIR)\tkImgUtil.obj \
	$(TMP_DIR)\tkListbox.obj \
	$(TMP_DIR)\tkMacWinMenu.obj \
	$(TMP_DIR)\tkMain.obj \
	$(TMP_DIR)\tkMenu.obj \
	$(TMP_DIR)\tkMenubutton.obj \
	$(TMP_DIR)\tkMenuDraw.obj \
	$(TMP_DIR)\tkMessage.obj \
	$(TMP_DIR)\tkObj.obj \
	$(TMP_DIR)\tkOldConfig.obj \
	$(TMP_DIR)\tkOption.obj \
	$(TMP_DIR)\tkPack.obj \
	$(TMP_DIR)\tkPlace.obj \
	$(TMP_DIR)\tkPointer.obj \
	$(TMP_DIR)\tkRectOval.obj \
	$(TMP_DIR)\tkScale.obj \
	$(TMP_DIR)\tkScrollbar.obj \
	$(TMP_DIR)\tkSelect.obj \
	$(TMP_DIR)\tkText.obj \
	$(TMP_DIR)\tkTextBTree.obj \
	$(TMP_DIR)\tkTextDisp.obj \
	$(TMP_DIR)\tkTextImage.obj \
	$(TMP_DIR)\tkTextIndex.obj \
	$(TMP_DIR)\tkTextMark.obj \
	$(TMP_DIR)\tkTextTag.obj \
	$(TMP_DIR)\tkTextWind.obj \
	$(TMP_DIR)\tkTrig.obj \
	$(TMP_DIR)\tkUtil.obj \
	$(TMP_DIR)\tkVisual.obj \
	$(TMP_DIR)\tkStubInit.obj \
	$(TMP_DIR)\tkStubLib.obj \
	$(TMP_DIR)\tkWindow.obj \
!if !$(STATIC_BUILD)
	$(TMP_DIR)\tk.res
!endif

TKSTUBOBJS = \
	$(TMP_DIR)\tkStubLib.obj \
	$(TMP_DIR)\tkStubImg.obj


WINDIR          = $(ROOT)\win
GENERICDIR	= $(ROOT)\generic
XLIBDIR		= $(ROOT)\xlib
BITMAPDIR	= $(ROOT)\bitmaps
RCDIR		= $(WINDIR)\rc

!if $(TCLINSTALL)
TCL_INCLUDES	= -I "$(TCLDIR)\include"
!else
TCL_INCLUDES	= -I "$(TCLDIR)\win" -I "$(TCLDIR)\generic"
!endif
TK_INCLUDES	= -I"$(WINDIR)" -I"$(GENERICDIR)" -I"$(BITMAPDIR)" -I"$(XLIBDIR)" \
			$(TCL_INCLUDES)

TK_DEFINES	= $(OPTDEFINES)


#---------------------------------------------------------------------
# Compile flags
#---------------------------------------------------------------------

!if $(DEBUG)
!if "$(MACHINE)" == "IA64"
cdebug = -Od -Zi
!else
cdebug = -Z7 -Od -WX
!endif
!else
# This cranks the optimization level to maximize speed
cdebug = -O2
!endif

# declarations common to all compiler options
cflags = -nologo -c -W3 -Fp$(TMP_DIR)^\ -YX

!if $(MSVCRT)
crt = -MD$(DBGX)
!else
crt = -MT$(DBGX)
!endif

BASE_CLFAGS	= $(cdebug) $(cflags) $(crt) $(TK_INCLUDES)
TK_CFLAGS	= $(BASE_CLFAGS) $(TK_DEFINES) -DUSE_TCL_STUBS
CON_CFLAGS	= $(cdebug) $(cflags) $(crt) -DCONSOLE
WISH_CFLAGS	= $(BASE_CLFAGS) $(TK_DEFINES)


#---------------------------------------------------------------------
# Link flags
#---------------------------------------------------------------------

!if $(DEBUG)
ldebug	= -debug:full -debugtype:cv
!else
ldebug	= -release
!endif

# declarations common to all linker options
lflags	= -nologo -machine:$(MACHINE)

# declarations for use on Intel i386, i486, and Pentium systems
!IF "$(MACHINE)" == "IX86"
DLLENTRY = @12
dlllflags = $(lflags) -entry:_DllMainCRTStartup$(DLLENTRY) -dll
!ELSE IF "$(MACHINE)" == "IA64"
DLLENTRY = @12
dlllflags = $(lflags) -dll
!ELSE
dlllflags = $(lflags) -entry:_DllMainCRTStartup$(DLLENTRY) -dll
!ENDIF

conlflags = $(lflags) -subsystem:console -entry:mainCRTStartup
guilflags = $(lflags) -subsystem:windows -entry:WinMainCRTStartup

baselibs   = kernel32.lib advapi32.lib user32.lib
guilibs	   = $(baselibs) gdi32.lib comdlg32.lib winspool.lib imm32.lib comctl32.lib


#---------------------------------------------------------------------
# TkTest flags
#---------------------------------------------------------------------

!if "$(TESTPAT)" != ""
TESTFLAGS = -file $(TESTPAT)
!endif


#---------------------------------------------------------------------
# Project specific targets
#---------------------------------------------------------------------

release:  setup $(WISH)
all:	  release $(CAT32)
core:	  setup $(TKLIB)
install:  install-binaries install-libraries
tktest:	  setup $(TKTEST) $(CAT32)


test: setup $(TKTEST) $(TKLIB) $(CAT32)
	set TCL_LIBRARY=$(TCL_LIBRARY)
!if $(TCLINSTALL)
	set PATH=$(TCLDIR)\bin;$(PATH)
!else
	set PATH=$(TCLDIR)\win\$(BUILDDIRTOP);$(PATH)
!endif
!if "$(OS)" == "Windows_NT"  || "$(MSVCDIR)" == "IDE"
	$(TKTEST) $(ROOT)/tests/all.tcl $(TESTFLAGS) | $(CAT32)
!else
	$(TKTEST) $(ROOT)/tests/all.tcl $(TESTFLAGS) | $(CAT32)
!endif

runtest: setup $(TKTEST) $(TKLIB) $(CAT32)
	set TCL_LIBRARY=$(TCL_LIBRARY)
!if $(TCLINSTALL)
	set PATH=$(TCLDIR)\bin;$(PATH)
!else
	set PATH=$(TCLDIR)\win\$(BUILDDIRTOP);$(PATH)
!endif
	$(TKTEST) 

rundemo: setup $(TKTEST) $(TKLIB) $(CAT32)
	set TCL_LIBRARY=$(TCL_LIBRARY)
!if $(TCLINSTALL)
	set PATH=$(TCLDIR)\bin;$(PATH)
!else
	set PATH=$(TCLDIR)\win\$(BUILDDIRTOP);$(PATH)
!endif
	$(TKTEST) $(ROOT)\library\demos\widget

setup:
	@$(MKDIR) $(TMP_DIR)
	@$(MKDIR) $(OUT_DIR)

console-wish : $(WISHC)

!if !$(STATIC_BUILD)
$(TKIMPLIB): $(TKLIB)
!endif

$(TKLIB): $(TKOBJS)
!if $(STATIC_BUILD)
	$(lib32) -nologo -out:$@ @<<
$**
<<
!else
	$(link32) $(ldebug) $(dlllflags) -out:$@ $(guilibs) $(TCLSTUBLIB) @<<
$**
<<
	-@del $*.exp
!endif


$(TKSTUBLIB): $(TKSTUBOBJS)
	$(lib32) -nologo -out:$@ $**


$(WISH): $(WISHOBJS) $(TKIMPLIB)
	$(link32) $(ldebug) $(guilflags) -out:$@ $(guilibs) $(TCLIMPLIB) $**

$(WISHC): $(WISHOBJS) $(TKIMPLIB)
	$(link32) $(ldebug) $(conlflags) -out:$@ $(guilibs) $(TCLIMPLIB) $**

$(TKTEST): $(TKTESTOBJS) $(TKIMPLIB)
	$(link32) $(ldebug) $(guilflags) -out:$@ $(guilibs) $(TCLIMPLIB) $**


$(CAT32): $(WINDIR)\cat.c
	$(cc32) $(CON_CFLAGS) -Fo$(TMP_DIR)\ $?
	$(link32) $(conlflags) -out:$@ -stack:16384 $(TMP_DIR)\cat.obj $(baselibs)

install-binaries:
	@$(MKDIR) "$(BIN_INSTALL_DIR)"
	copy $(TKDLL) "$(BIN_INSTALL_DIR)"
	copy $(WISH) "$(BIN_INSTALL_DIR)"
	@$(MKDIR) "$(LIB_INSTALL_DIR)"
!if "$(TKLIB)" != "$(TKIMPLIB)"
	@copy "$(TKLIB)" "$(BIN_INSTALL_DIR)"
!endif
	@copy $(TKIMPLIB) "$(LIB_INSTALL_DIR)"
	@if exist $(TKHLP) $(MKDIR) "$(DOC_INSTALL_DIR)"
	@if exist $(TKHLP) copy "$(TKHLP)" "$(DOC_INSTALL_DIR)"
	@if exist $(TKHLPCNT) copy "$(TKHLPCNT)" "$(DOC_INSTALL_DIR)"

install-libraries:
	@$(MKDIR) "$(INCLUDE_INSTALL_DIR)"
	@$(MKDIR) "$(INCLUDE_INSTALL_DIR)\X11"
	copy "$(GENERICDIR)\tk.h"             "$(INCLUDE_INSTALL_DIR)"
	copy "$(GENERICDIR)\tkDecls.h"        "$(INCLUDE_INSTALL_DIR)"
	copy "$(GENERICDIR)\tkPlatDecls.h"    "$(INCLUDE_INSTALL_DIR)"
	copy "$(GENERICDIR)\tkIntXlibDecls.h" "$(INCLUDE_INSTALL_DIR)"
	xcopy "$(XLIBDIR)\X11\*.h"            "$(INCLUDE_INSTALL_DIR)\X11"
	@$(MKDIR) "$(SCRIPT_INSTALL_DIR)"
	@$(MKDIR) "$(SCRIPT_INSTALL_DIR)\images"
	@$(MKDIR) "$(SCRIPT_INSTALL_DIR)\demos"
	@$(MKDIR) "$(SCRIPT_INSTALL_DIR)\demos\images"
	xcopy "$(ROOT)\library"              "$(SCRIPT_INSTALL_DIR)"
	xcopy "$(ROOT)\library\images"       "$(SCRIPT_INSTALL_DIR)\images"
	xcopy "$(ROOT)\library\demos"        "$(SCRIPT_INSTALL_DIR)\demos"
	xcopy "$(ROOT)\library\demos\images" "$(SCRIPT_INSTALL_DIR)\demos\images"


#---------------------------------------------------------------------
# Regenerate the stubs files.
#---------------------------------------------------------------------

genstubs:
	$(TCLSH) $(TCLDIR)\tools\genStubs.tcl $(GENERICDIR) \
		$(GENERICDIR)\tk.decls $(GENERICDIR)\tkInt.decls


#---------------------------------------------------------------------
# Regenerate the windows help files.
#---------------------------------------------------------------------

#MAN2TCL		= $(TOOLSDIR)\man2tcl
#TCLRTF		= $(TOOLSDIR)\tcl.rtf
#MAN2HELP	= $(TOOLSDIR)\man2help.tcl
#TCLHPJ		= $(TOOLSDIR)\tcl.hpj

#winhelp: $(TCLHLP)

#$(TCLHLP): $(TCLRTF)
#	cd $(TOOLSDIR)
#	start /wait hcrtf.exe -x tcl.hpj
#	cd $(MAKEDIR)
#	copy $(TOOLSDIR)\$(TCLHLPBASE).hlp $(OUT_DIR)
#	copy $(TOOLSDIR)\$(TCLHLPBASE).cnt $(OUT_DIR)

#$(TCLHPJ): $(TCLHPJ).in
#	copy $(TCLHPJ).in $(TCLHPJ)

#$(MAN2TCL).exe: $(MAN2TCL).obj 
#	cd $(TOOLSDIR)
#	$(cc32) -nologo -G4 -ML -O2 $(MAN2TCL).c
#	cd $(MAKEDIR)

#$(TCLRTF): $(MAN2TCL).exe $(TCLSH)
#	cd $(TOOLSDIR)
#	..\win\$(TCLSH) $(MAN2HELP) $(PROJECT) $(VERSION) $(ROOT)/doc \
#		../../tk$(DOTVERSION)/doc
#	cd $(MAKEDIR)


#---------------------------------------------------------------------
# Special case object file targets
#---------------------------------------------------------------------

$(TMP_DIR)\testMain.obj: $(WINDIR)\winMain.c
	$(cc32) $(WISH_CFLAGS) -DTK_TEST -Fo$@ $?

$(TMP_DIR)\tkTest.obj: $(GENERICDIR)\tkTest.c
	$(cc32) $(WISH_CFLAGS) -Fo$@ $?

$(TMP_DIR)\tkWinTest.obj: $(WINDIR)\tkWinTest.c
	$(cc32) $(WISH_CFLAGS) -Fo$@ $?

$(TMP_DIR)\tkSquare.obj: $(GENERICDIR)\tkSquare.c
	$(cc32) $(WISH_CFLAGS) -Fo$@ $?

$(TMP_DIR)\winMain.obj: $(WINDIR)\winMain.c
	$(cc32) $(WISH_CFLAGS) -Fo$@ $?

# The following objects are part of the stub library and should not
# be built as DLL objects but none of the symbols should be exported
# and no reference made to a C runtime.

$(TMP_DIR)\tkStubLib.obj : $(GENERICDIR)\tkStubLib.c
	$(cc32) $(cdebug) $(cflags) $(TK_INCLUDES) -Zl -DSTATIC_BUILD -Fo$@ $?

$(TMP_DIR)\tkStubImg.obj : $(GENERICDIR)\tkStubImg.c
	$(cc32) $(cdebug) $(cflags) $(TK_INCLUDES) -Zl -DSTATIC_BUILD -Fo$@ $?


#---------------------------------------------------------------------
# Dedependency rules
#---------------------------------------------------------------------

$(TMP_DIR)\tk.res: \
    $(RCDIR)\buttons.bmp \
    $(RCDIR)\cursor*.cur \
    $(RCDIR)\tk.ico

$(GENERICDIR)/default.h: $(WINDIR)/tkWinDefault.h
$(GENERICDIR)/tkButton.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkCanvas.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkEntry.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkFrame.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkListbox.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkMenu.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkMenubutton.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkMessage.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkScale.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkScrollbar.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkText.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkTextIndex.c: $(GENERICDIR)/default.h
$(GENERICDIR)/tkTextTag.c: $(GENERICDIR)/default.h

$(GENERICDIR)/tkText.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextBTree.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextDisp.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextDisp.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextImage.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextIndex.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextMark.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextTag.c: $(GENERICDIR)/tkText.h
$(GENERICDIR)/tkTextWind.c: $(GENERICDIR)/tkText.h

$(GENERICDIR)/tkMacWinMenu.c: $(GENERICDIR)/tkMenu.h
$(GENERICDIR)/tkMenu.c: $(GENERICDIR)/tkMenu.h
$(GENERICDIR)/tkMenuDraw.c: $(GENERICDIR)/tkMenu.h
$(WINDIR)/tkWinMenu.c: $(GENERICDIR)/tkMenu.h



#---------------------------------------------------------------------
# Implicit rules
#---------------------------------------------------------------------

{$(XLIBDIR)}.c{$(TMP_DIR)}.obj::
	$(cc32) -DBUILD_tk $(TK_CFLAGS) -Fo$(TMP_DIR)\ @<<
$<
<<

{$(GENERICDIR)}.c{$(TMP_DIR)}.obj::
	$(cc32) -DBUILD_tk $(TK_CFLAGS) -Fo$(TMP_DIR)\ @<<
$<
<<

{$(WINDIR)}.c{$(TMP_DIR)}.obj::
	$(cc32) -DBUILD_tk $(TK_CFLAGS) -Fo$(TMP_DIR)\ @<<
$<
<<

{$(ROOT)\unix}.c{$(TMP_DIR)}.obj::
	$(cc32) -DBUILD_tk $(TK_CFLAGS) -Fo$(TMP_DIR)\ @<<
$<
<<

{$(RCDIR)}.rc{$(TMP_DIR)}.res:
	$(rc32) -fo $@ -r -i "$(GENERICDIR)" $(TCL_INCLUDES) \
!if $(DEBUG)
		-d DEBUG \
!endif
!if $(TCL_THREADS)
		-d TCL_THREADS \
!endif
!if $(STATIC_BUILD)
		-d STATIC_BUILD \
!endif
		$<

#---------------------------------------------------------------------
# Clean up
#---------------------------------------------------------------------

clean:
	-@$(RMDIR) $(TMP_DIR)

hose: clean
	-@$(RMDIR) $(OUT_DIR)


.SUFFIXES:
.SUFFIXES:.c .rc
