/*
 * tkIntPlatDecls.h --
 *
 *	This file contains the declarations for all platform dependent
 *	unsupported functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
 *
 * RCS: @(#) $Id$
 */

#ifndef _TKINTPLATDECLS
#define _TKINTPLATDECLS

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifdef __WIN32__
/* 0 */
EXTERN char *		TkAlignImageData _ANSI_ARGS_((XImage * image, 
				int alignment, int bitOrder));
/* 1 */
EXTERN void		TkClipBox _ANSI_ARGS_((TkRegion rgn, 
				XRectangle* rect_return));
/* 2 */
EXTERN TkRegion		TkCreateRegion _ANSI_ARGS_((void));
/* 3 */
EXTERN void		TkDestroyRegion _ANSI_ARGS_((TkRegion rgn));
/* 4 */
EXTERN void		TkGenerateActivateEvents _ANSI_ARGS_((
				TkWindow * winPtr, int active));
/* 5 */
EXTERN void		TkIntersectRegion _ANSI_ARGS_((TkRegion sra, 
				TkRegion srcb, TkRegion dr_return));
/* 6 */
EXTERN unsigned long	TkpGetMS _ANSI_ARGS_((void));
/* 7 */
EXTERN void		TkPointerDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
/* 8 */
EXTERN void		TkpPrintWindowId _ANSI_ARGS_((char * buf, 
				Window window));
/* 9 */
EXTERN int		TkpScanWindowId _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, int * idPtr));
/* Slot 10 is reserved */
/* 11 */
EXTERN void		TkpSetCapture _ANSI_ARGS_((TkWindow * winPtr));
/* 12 */
EXTERN void		TkpSetCursor _ANSI_ARGS_((TkpCursor cursor));
/* 13 */
EXTERN void		TkpWmSetState _ANSI_ARGS_((TkWindow * winPtr, 
				int state));
/* 14 */
EXTERN int		TkRectInRegion _ANSI_ARGS_((TkRegion rgn, int x, 
				int y, unsigned int width, 
				unsigned int height));
/* 15 */
EXTERN void		TkSetPixmapColormap _ANSI_ARGS_((Pixmap pixmap, 
				Colormap colormap));
/* 16 */
EXTERN void		TkSetRegion _ANSI_ARGS_((Display* display, GC gc, 
				TkRegion rgn));
/* 17 */
EXTERN void		TkUnionRectWithRegion _ANSI_ARGS_((XRectangle* rect, 
				TkRegion src, TkRegion dr_return));
/* 18 */
EXTERN void		TkWinCancelMouseTimer _ANSI_ARGS_((void));
/* Slot 19 is reserved */
/* 20 */
EXTERN void		TkWinClipboardRender _ANSI_ARGS_((
				TkDisplay * dispPtr, UINT format));
/* 21 */
EXTERN LRESULT		TkWinEmbeddedEventProc _ANSI_ARGS_((HWND hwnd, 
				UINT message, WPARAM wParam, LPARAM lParam));
/* 22 */
EXTERN void		TkWinFillRect _ANSI_ARGS_((HDC dc, int x, int y, 
				int width, int height, int pixel));
/* 23 */
EXTERN COLORREF		TkWinGetBorderPixels _ANSI_ARGS_((Tk_Window tkwin, 
				Tk_3DBorder border, int which));
/* 24 */
EXTERN HDC		TkWinGetDrawableDC _ANSI_ARGS_((Display * display, 
				Drawable d, TkWinDCState* state));
/* 25 */
EXTERN int		TkWinGetModifierState _ANSI_ARGS_((void));
/* 26 */
EXTERN HPALETTE		TkWinGetSystemPalette _ANSI_ARGS_((void));
/* 27 */
EXTERN HWND		TkWinGetWrapperWindow _ANSI_ARGS_((Tk_Window tkwin));
/* 28 */
EXTERN int		TkWinHandleMenuEvent _ANSI_ARGS_((HWND * phwnd, 
				UINT * pMessage, WPARAM * pwParam, 
				LPARAM * plParam, LRESULT * plResult));
/* 29 */
EXTERN int		TkWinIndexOfColor _ANSI_ARGS_((XColor * colorPtr));
/* 30 */
EXTERN void		TkWinPointerDeadWindow _ANSI_ARGS_((
				TkWindow * winPtr));
/* 31 */
EXTERN void		TkWinPointerEvent _ANSI_ARGS_((HWND hwnd, int x, 
				int y));
/* 32 */
EXTERN void		TkWinPointerInit _ANSI_ARGS_((void));
/* 33 */
EXTERN LRESULT		TkWinReflectMessage _ANSI_ARGS_((HWND hwnd, 
				UINT message, WPARAM wParam, LPARAM lParam));
/* 34 */
EXTERN void		TkWinReleaseDrawableDC _ANSI_ARGS_((Drawable d, 
				HDC hdc, TkWinDCState* state));
/* 35 */
EXTERN LRESULT		TkWinResendEvent _ANSI_ARGS_((WNDPROC wndproc, 
				HWND hwnd, XEvent * eventPtr));
/* 36 */
EXTERN HPALETTE		TkWinSelectPalette _ANSI_ARGS_((HDC dc, 
				Colormap colormap));
/* 37 */
EXTERN void		TkWinSetMenu _ANSI_ARGS_((Tk_Window tkwin, 
				HMENU hMenu));
/* 38 */
EXTERN void		TkWinSetWindowPos _ANSI_ARGS_((HWND hwnd, 
				HWND siblingHwnd, int pos));
/* 39 */
EXTERN void		TkWinUpdateCursor _ANSI_ARGS_((TkWindow * winPtr));
/* 40 */
EXTERN void		TkWinWmCleanup _ANSI_ARGS_((HINSTANCE hInstance));
/* 41 */
EXTERN HWND		TkWinWmFindEmbedAssociation _ANSI_ARGS_((
				TkWindow * winPtr));
/* 42 */
EXTERN void		TkWinWmStoreEmbedAssociation _ANSI_ARGS_((
				TkWindow * winPtr, HWND hwnd));
/* 43 */
EXTERN void		TkWinXCleanup _ANSI_ARGS_((HINSTANCE hInstance));
/* 44 */
EXTERN void		TkWinXInit _ANSI_ARGS_((HINSTANCE hInstance));
#endif /* __WIN32__ */
#if !defined(__WIN32__) && !defined(MAC_TCL)
/* 0 */
EXTERN void		TkCreateXEventSource _ANSI_ARGS_((void));
/* 1 */
EXTERN void		TkFreeWindowId _ANSI_ARGS_((TkDisplay * dispPtr, 
				Window w));
/* 2 */
EXTERN void		TkInitXId _ANSI_ARGS_((TkDisplay * dispPtr));
/* 3 */
EXTERN TkWindow *	TkpGetContainer _ANSI_ARGS_((TkWindow * embeddedPtr));
/* 4 */
EXTERN int		TkpCmapStressed _ANSI_ARGS_((Tk_Window tkwin, 
				Colormap colormap));
/* 5 */
EXTERN void		TkpSync _ANSI_ARGS_((Display * display));
/* 6 */
EXTERN Window		TkUnixContainerId _ANSI_ARGS_((TkWindow * winPtr));
/* 7 */
EXTERN int		TkUnixDoOneXEvent _ANSI_ARGS_((Tcl_Time * timePtr));
/* 8 */
EXTERN void		TkUnixSetMenubar _ANSI_ARGS_((Tk_Window tkwin, 
				Tk_Window menubar));
#endif /* UNIX */
#ifdef MAC_TCL
/* 0 */
EXTERN void		TkClipBox _ANSI_ARGS_((TkRegion rgn, 
				XRectangle* rect_return));
/* 1 */
EXTERN TkRegion		TkCreateRegion _ANSI_ARGS_((void));
/* 2 */
EXTERN void		TkDestroyRegion _ANSI_ARGS_((TkRegion rgn));
/* 3 */
EXTERN void		TkGenerateActivateEvents _ANSI_ARGS_((
				TkWindow * winPtr, int active));
/* 4 */
EXTERN void		TkIntersectRegion _ANSI_ARGS_((TkRegion sra, 
				TkRegion srcb, TkRegion dr_return));
/* 5 */
EXTERN Pixmap		TkpCreateNativeBitmap _ANSI_ARGS_((Display * display, 
				char * source));
/* 6 */
EXTERN void		TkpDefineNativeBitmaps _ANSI_ARGS_((void));
/* 7 */
EXTERN unsigned long	TkpGetMS _ANSI_ARGS_((void));
/* 8 */
EXTERN Pixmap		TkpGetNativeAppBitmap _ANSI_ARGS_((Display * display, 
				char * name, int * width, int * height));
/* 9 */
EXTERN void		TkPointerDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
/* 10 */
EXTERN void		TkpSetCapture _ANSI_ARGS_((TkWindow * winPtr));
/* 11 */
EXTERN void		TkpSetCursor _ANSI_ARGS_((TkpCursor cursor));
/* Slot 12 is reserved */
/* 13 */
EXTERN void		TkpWmSetState _ANSI_ARGS_((TkWindow * winPtr, 
				int state));
/* 14 */
EXTERN int		TkRectInRegion _ANSI_ARGS_((TkRegion rgn, int x, 
				int y, unsigned int width, 
				unsigned int height));
/* 15 */
EXTERN void		TkSetRegion _ANSI_ARGS_((Display* display, GC gc, 
				TkRegion rgn));
/* 16 */
EXTERN void		TkUnionRectWithRegion _ANSI_ARGS_((XRectangle* rect, 
				TkRegion src, TkRegion dr_return));
/* 17 */
EXTERN int		HandleWMEvent _ANSI_ARGS_((EventRecord * theEvent));
/* 18 */
EXTERN void		TkAboutDlg _ANSI_ARGS_((void));
/* 19 */
EXTERN void		TkCreateMacEventSource _ANSI_ARGS_((void));
/* 20 */
EXTERN void		TkFontList _ANSI_ARGS_((Tcl_Interp * interp, 
				Display * display));
/* 21 */
EXTERN Window		TkGetTransientMaster _ANSI_ARGS_((TkWindow * winPtr));
/* 22 */
EXTERN int		TkGenerateButtonEvent _ANSI_ARGS_((int x, int y, 
				Window window, unsigned int state));
/* 23 */
EXTERN int		TkGetCharPositions _ANSI_ARGS_((
				XFontStruct * font_struct, char * string, 
				int count, short * buffer));
/* 24 */
EXTERN void		TkGenWMDestroyEvent _ANSI_ARGS_((Tk_Window tkwin));
/* 25 */
EXTERN void		TkGenWMConfigureEvent _ANSI_ARGS_((Tk_Window tkwin, 
				int x, int y, int width, int height, 
				int flags));
/* 26 */
EXTERN unsigned int	TkMacButtonKeyState _ANSI_ARGS_((void));
/* 27 */
EXTERN void		TkMacClearMenubarActive _ANSI_ARGS_((void));
/* 28 */
EXTERN int		TkMacConvertEvent _ANSI_ARGS_((
				EventRecord * eventPtr));
/* 29 */
EXTERN int		TkMacDispatchMenuEvent _ANSI_ARGS_((int menuID, 
				int index));
/* 30 */
EXTERN void		TkMacInstallCursor _ANSI_ARGS_((int resizeOverride));
/* 31 */
EXTERN int		TkMacConvertTkEvent _ANSI_ARGS_((
				EventRecord * eventPtr, Window window));
/* 32 */
EXTERN void		TkMacHandleTearoffMenu _ANSI_ARGS_((void));
/* 33 */
EXTERN void		tkMacInstallMWConsole _ANSI_ARGS_((
				Tcl_Interp * interp));
/* 34 */
EXTERN void		TkMacInvalClipRgns _ANSI_ARGS_((TkWindow * winPtr));
/* 35 */
EXTERN void		TkMacDoHLEvent _ANSI_ARGS_((EventRecord * theEvent));
/* 36 */
EXTERN void		TkMacFontInfo _ANSI_ARGS_((Font fontId, 
				short * family, short * style, short * size));
/* 37 */
EXTERN Time		TkMacGenerateTime _ANSI_ARGS_((void));
/* 38 */
EXTERN GWorldPtr	TkMacGetDrawablePort _ANSI_ARGS_((Drawable drawable));
/* 39 */
EXTERN TkWindow *	TkMacGetScrollbarGrowWindow _ANSI_ARGS_((
				TkWindow * winPtr));
/* 40 */
EXTERN Window		TkMacGetXWindow _ANSI_ARGS_((WindowRef macWinPtr));
/* 41 */
EXTERN int		TkMacGrowToplevel _ANSI_ARGS_((WindowRef whichWindow, 
				Point start));
/* 42 */
EXTERN void		TkMacHandleMenuSelect _ANSI_ARGS_((long mResult, 
				int optionKeyPressed));
/* 43 */
EXTERN int		TkMacHaveAppearance _ANSI_ARGS_((void));
/* 44 */
EXTERN void		TkMacInitAppleEvents _ANSI_ARGS_((
				Tcl_Interp * interp));
/* 45 */
EXTERN void		TkMacInitMenus _ANSI_ARGS_((Tcl_Interp * interp));
/* 46 */
EXTERN void		TkMacInvalidateWindow _ANSI_ARGS_((
				MacDrawable * macWin, int flag));
/* 47 */
EXTERN int		TkMacIsCharacterMissing _ANSI_ARGS_((Tk_Font tkfont, 
				unsigned int searchChar));
/* 48 */
EXTERN void		TkMacMakeRealWindowExist _ANSI_ARGS_((
				TkWindow * winPtr));
/* 49 */
EXTERN BitMapPtr	TkMacMakeStippleMap _ANSI_ARGS_((Drawable d1, 
				Drawable d2));
/* 50 */
EXTERN void		TkMacMenuClick _ANSI_ARGS_((void));
/* 51 */
EXTERN void		TkMacRegisterOffScreenWindow _ANSI_ARGS_((
				Window window, GWorldPtr portPtr));
/* 52 */
EXTERN int		TkMacResizable _ANSI_ARGS_((TkWindow * winPtr));
/* 53 */
EXTERN void		TkMacSetEmbedRgn _ANSI_ARGS_((TkWindow * winPtr, 
				RgnHandle rgn));
/* 54 */
EXTERN void		TkMacSetHelpMenuItemCount _ANSI_ARGS_((void));
/* 55 */
EXTERN void		TkMacSetScrollbarGrow _ANSI_ARGS_((TkWindow * winPtr, 
				int flag));
/* 56 */
EXTERN void		TkMacSetUpClippingRgn _ANSI_ARGS_((Drawable drawable));
/* 57 */
EXTERN void		TkMacSetUpGraphicsPort _ANSI_ARGS_((GC gc));
/* 58 */
EXTERN void		TkMacUpdateClipRgn _ANSI_ARGS_((TkWindow * winPtr));
/* 59 */
EXTERN void		TkMacUnregisterMacWindow _ANSI_ARGS_((
				GWorldPtr portPtr));
/* 60 */
EXTERN int		TkMacUseMenuID _ANSI_ARGS_((short macID));
/* 61 */
EXTERN RgnHandle	TkMacVisableClipRgn _ANSI_ARGS_((TkWindow * winPtr));
/* 62 */
EXTERN void		TkMacWinBounds _ANSI_ARGS_((TkWindow * winPtr, 
				Rect * geometry));
/* 63 */
EXTERN void		TkMacWindowOffset _ANSI_ARGS_((WindowRef wRef, 
				int * xOffset, int * yOffset));
/* 64 */
EXTERN void		TkResumeClipboard _ANSI_ARGS_((void));
/* 65 */
EXTERN int		TkSetMacColor _ANSI_ARGS_((unsigned long pixel, 
				RGBColor * macColor));
/* 66 */
EXTERN void		TkSetWMName _ANSI_ARGS_((TkWindow * winPtr, 
				Tk_Uid titleUid));
/* 67 */
EXTERN void		TkSuspendClipboard _ANSI_ARGS_((void));
/* 68 */
EXTERN int		TkWMGrowToplevel _ANSI_ARGS_((WindowRef whichWindow, 
				Point start));
/* 69 */
EXTERN int		TkMacZoomToplevel _ANSI_ARGS_((WindowPtr whichWindow, 
				Point where, short zoomPart));
/* 70 */
EXTERN Tk_Window	Tk_TopCoordsToWindow _ANSI_ARGS_((Tk_Window tkwin, 
				int rootX, int rootY, int * newX, int * newY));
/* 71 */
EXTERN MacDrawable *	TkMacContainerId _ANSI_ARGS_((TkWindow * winPtr));
/* 72 */
EXTERN MacDrawable *	TkMacGetHostToplevel _ANSI_ARGS_((TkWindow * winPtr));
#endif /* MAC_TCL */

typedef struct TkIntPlatStubs {
    int magic;
    struct TkIntPlatStubHooks *hooks;

#ifdef __WIN32__
    char * (*tkAlignImageData) _ANSI_ARGS_((XImage * image, int alignment, int bitOrder)); /* 0 */
    void (*tkClipBox) _ANSI_ARGS_((TkRegion rgn, XRectangle* rect_return)); /* 1 */
    TkRegion (*tkCreateRegion) _ANSI_ARGS_((void)); /* 2 */
    void (*tkDestroyRegion) _ANSI_ARGS_((TkRegion rgn)); /* 3 */
    void (*tkGenerateActivateEvents) _ANSI_ARGS_((TkWindow * winPtr, int active)); /* 4 */
    void (*tkIntersectRegion) _ANSI_ARGS_((TkRegion sra, TkRegion srcb, TkRegion dr_return)); /* 5 */
    unsigned long (*tkpGetMS) _ANSI_ARGS_((void)); /* 6 */
    void (*tkPointerDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 7 */
    void (*tkpPrintWindowId) _ANSI_ARGS_((char * buf, Window window)); /* 8 */
    int (*tkpScanWindowId) _ANSI_ARGS_((Tcl_Interp * interp, char * string, int * idPtr)); /* 9 */
    void *reserved10;
    void (*tkpSetCapture) _ANSI_ARGS_((TkWindow * winPtr)); /* 11 */
    void (*tkpSetCursor) _ANSI_ARGS_((TkpCursor cursor)); /* 12 */
    void (*tkpWmSetState) _ANSI_ARGS_((TkWindow * winPtr, int state)); /* 13 */
    int (*tkRectInRegion) _ANSI_ARGS_((TkRegion rgn, int x, int y, unsigned int width, unsigned int height)); /* 14 */
    void (*tkSetPixmapColormap) _ANSI_ARGS_((Pixmap pixmap, Colormap colormap)); /* 15 */
    void (*tkSetRegion) _ANSI_ARGS_((Display* display, GC gc, TkRegion rgn)); /* 16 */
    void (*tkUnionRectWithRegion) _ANSI_ARGS_((XRectangle* rect, TkRegion src, TkRegion dr_return)); /* 17 */
    void (*tkWinCancelMouseTimer) _ANSI_ARGS_((void)); /* 18 */
    void *reserved19;
    void (*tkWinClipboardRender) _ANSI_ARGS_((TkDisplay * dispPtr, UINT format)); /* 20 */
    LRESULT (*tkWinEmbeddedEventProc) _ANSI_ARGS_((HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)); /* 21 */
    void (*tkWinFillRect) _ANSI_ARGS_((HDC dc, int x, int y, int width, int height, int pixel)); /* 22 */
    COLORREF (*tkWinGetBorderPixels) _ANSI_ARGS_((Tk_Window tkwin, Tk_3DBorder border, int which)); /* 23 */
    HDC (*tkWinGetDrawableDC) _ANSI_ARGS_((Display * display, Drawable d, TkWinDCState* state)); /* 24 */
    int (*tkWinGetModifierState) _ANSI_ARGS_((void)); /* 25 */
    HPALETTE (*tkWinGetSystemPalette) _ANSI_ARGS_((void)); /* 26 */
    HWND (*tkWinGetWrapperWindow) _ANSI_ARGS_((Tk_Window tkwin)); /* 27 */
    int (*tkWinHandleMenuEvent) _ANSI_ARGS_((HWND * phwnd, UINT * pMessage, WPARAM * pwParam, LPARAM * plParam, LRESULT * plResult)); /* 28 */
    int (*tkWinIndexOfColor) _ANSI_ARGS_((XColor * colorPtr)); /* 29 */
    void (*tkWinPointerDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 30 */
    void (*tkWinPointerEvent) _ANSI_ARGS_((HWND hwnd, int x, int y)); /* 31 */
    void (*tkWinPointerInit) _ANSI_ARGS_((void)); /* 32 */
    LRESULT (*tkWinReflectMessage) _ANSI_ARGS_((HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)); /* 33 */
    void (*tkWinReleaseDrawableDC) _ANSI_ARGS_((Drawable d, HDC hdc, TkWinDCState* state)); /* 34 */
    LRESULT (*tkWinResendEvent) _ANSI_ARGS_((WNDPROC wndproc, HWND hwnd, XEvent * eventPtr)); /* 35 */
    HPALETTE (*tkWinSelectPalette) _ANSI_ARGS_((HDC dc, Colormap colormap)); /* 36 */
    void (*tkWinSetMenu) _ANSI_ARGS_((Tk_Window tkwin, HMENU hMenu)); /* 37 */
    void (*tkWinSetWindowPos) _ANSI_ARGS_((HWND hwnd, HWND siblingHwnd, int pos)); /* 38 */
    void (*tkWinUpdateCursor) _ANSI_ARGS_((TkWindow * winPtr)); /* 39 */
    void (*tkWinWmCleanup) _ANSI_ARGS_((HINSTANCE hInstance)); /* 40 */
    HWND (*tkWinWmFindEmbedAssociation) _ANSI_ARGS_((TkWindow * winPtr)); /* 41 */
    void (*tkWinWmStoreEmbedAssociation) _ANSI_ARGS_((TkWindow * winPtr, HWND hwnd)); /* 42 */
    void (*tkWinXCleanup) _ANSI_ARGS_((HINSTANCE hInstance)); /* 43 */
    void (*tkWinXInit) _ANSI_ARGS_((HINSTANCE hInstance)); /* 44 */
#endif /* __WIN32__ */
#if !defined(__WIN32__) && !defined(MAC_TCL)
    void (*tkCreateXEventSource) _ANSI_ARGS_((void)); /* 0 */
    void (*tkFreeWindowId) _ANSI_ARGS_((TkDisplay * dispPtr, Window w)); /* 1 */
    void (*tkInitXId) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 2 */
    TkWindow * (*tkpGetContainer) _ANSI_ARGS_((TkWindow * embeddedPtr)); /* 3 */
    int (*tkpCmapStressed) _ANSI_ARGS_((Tk_Window tkwin, Colormap colormap)); /* 4 */
    void (*tkpSync) _ANSI_ARGS_((Display * display)); /* 5 */
    Window (*tkUnixContainerId) _ANSI_ARGS_((TkWindow * winPtr)); /* 6 */
    int (*tkUnixDoOneXEvent) _ANSI_ARGS_((Tcl_Time * timePtr)); /* 7 */
    void (*tkUnixSetMenubar) _ANSI_ARGS_((Tk_Window tkwin, Tk_Window menubar)); /* 8 */
#endif /* UNIX */
#ifdef MAC_TCL
    void (*tkClipBox) _ANSI_ARGS_((TkRegion rgn, XRectangle* rect_return)); /* 0 */
    TkRegion (*tkCreateRegion) _ANSI_ARGS_((void)); /* 1 */
    void (*tkDestroyRegion) _ANSI_ARGS_((TkRegion rgn)); /* 2 */
    void (*tkGenerateActivateEvents) _ANSI_ARGS_((TkWindow * winPtr, int active)); /* 3 */
    void (*tkIntersectRegion) _ANSI_ARGS_((TkRegion sra, TkRegion srcb, TkRegion dr_return)); /* 4 */
    Pixmap (*tkpCreateNativeBitmap) _ANSI_ARGS_((Display * display, char * source)); /* 5 */
    void (*tkpDefineNativeBitmaps) _ANSI_ARGS_((void)); /* 6 */
    unsigned long (*tkpGetMS) _ANSI_ARGS_((void)); /* 7 */
    Pixmap (*tkpGetNativeAppBitmap) _ANSI_ARGS_((Display * display, char * name, int * width, int * height)); /* 8 */
    void (*tkPointerDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 9 */
    void (*tkpSetCapture) _ANSI_ARGS_((TkWindow * winPtr)); /* 10 */
    void (*tkpSetCursor) _ANSI_ARGS_((TkpCursor cursor)); /* 11 */
    void *reserved12;
    void (*tkpWmSetState) _ANSI_ARGS_((TkWindow * winPtr, int state)); /* 13 */
    int (*tkRectInRegion) _ANSI_ARGS_((TkRegion rgn, int x, int y, unsigned int width, unsigned int height)); /* 14 */
    void (*tkSetRegion) _ANSI_ARGS_((Display* display, GC gc, TkRegion rgn)); /* 15 */
    void (*tkUnionRectWithRegion) _ANSI_ARGS_((XRectangle* rect, TkRegion src, TkRegion dr_return)); /* 16 */
    int (*handleWMEvent) _ANSI_ARGS_((EventRecord * theEvent)); /* 17 */
    void (*tkAboutDlg) _ANSI_ARGS_((void)); /* 18 */
    void (*tkCreateMacEventSource) _ANSI_ARGS_((void)); /* 19 */
    void (*tkFontList) _ANSI_ARGS_((Tcl_Interp * interp, Display * display)); /* 20 */
    Window (*tkGetTransientMaster) _ANSI_ARGS_((TkWindow * winPtr)); /* 21 */
    int (*tkGenerateButtonEvent) _ANSI_ARGS_((int x, int y, Window window, unsigned int state)); /* 22 */
    int (*tkGetCharPositions) _ANSI_ARGS_((XFontStruct * font_struct, char * string, int count, short * buffer)); /* 23 */
    void (*tkGenWMDestroyEvent) _ANSI_ARGS_((Tk_Window tkwin)); /* 24 */
    void (*tkGenWMConfigureEvent) _ANSI_ARGS_((Tk_Window tkwin, int x, int y, int width, int height, int flags)); /* 25 */
    unsigned int (*tkMacButtonKeyState) _ANSI_ARGS_((void)); /* 26 */
    void (*tkMacClearMenubarActive) _ANSI_ARGS_((void)); /* 27 */
    int (*tkMacConvertEvent) _ANSI_ARGS_((EventRecord * eventPtr)); /* 28 */
    int (*tkMacDispatchMenuEvent) _ANSI_ARGS_((int menuID, int index)); /* 29 */
    void (*tkMacInstallCursor) _ANSI_ARGS_((int resizeOverride)); /* 30 */
    int (*tkMacConvertTkEvent) _ANSI_ARGS_((EventRecord * eventPtr, Window window)); /* 31 */
    void (*tkMacHandleTearoffMenu) _ANSI_ARGS_((void)); /* 32 */
    void (*tkMacInstallMWConsole) _ANSI_ARGS_((Tcl_Interp * interp)); /* 33 */
    void (*tkMacInvalClipRgns) _ANSI_ARGS_((TkWindow * winPtr)); /* 34 */
    void (*tkMacDoHLEvent) _ANSI_ARGS_((EventRecord * theEvent)); /* 35 */
    void (*tkMacFontInfo) _ANSI_ARGS_((Font fontId, short * family, short * style, short * size)); /* 36 */
    Time (*tkMacGenerateTime) _ANSI_ARGS_((void)); /* 37 */
    GWorldPtr (*tkMacGetDrawablePort) _ANSI_ARGS_((Drawable drawable)); /* 38 */
    TkWindow * (*tkMacGetScrollbarGrowWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 39 */
    Window (*tkMacGetXWindow) _ANSI_ARGS_((WindowRef macWinPtr)); /* 40 */
    int (*tkMacGrowToplevel) _ANSI_ARGS_((WindowRef whichWindow, Point start)); /* 41 */
    void (*tkMacHandleMenuSelect) _ANSI_ARGS_((long mResult, int optionKeyPressed)); /* 42 */
    int (*tkMacHaveAppearance) _ANSI_ARGS_((void)); /* 43 */
    void (*tkMacInitAppleEvents) _ANSI_ARGS_((Tcl_Interp * interp)); /* 44 */
    void (*tkMacInitMenus) _ANSI_ARGS_((Tcl_Interp * interp)); /* 45 */
    void (*tkMacInvalidateWindow) _ANSI_ARGS_((MacDrawable * macWin, int flag)); /* 46 */
    int (*tkMacIsCharacterMissing) _ANSI_ARGS_((Tk_Font tkfont, unsigned int searchChar)); /* 47 */
    void (*tkMacMakeRealWindowExist) _ANSI_ARGS_((TkWindow * winPtr)); /* 48 */
    BitMapPtr (*tkMacMakeStippleMap) _ANSI_ARGS_((Drawable d1, Drawable d2)); /* 49 */
    void (*tkMacMenuClick) _ANSI_ARGS_((void)); /* 50 */
    void (*tkMacRegisterOffScreenWindow) _ANSI_ARGS_((Window window, GWorldPtr portPtr)); /* 51 */
    int (*tkMacResizable) _ANSI_ARGS_((TkWindow * winPtr)); /* 52 */
    void (*tkMacSetEmbedRgn) _ANSI_ARGS_((TkWindow * winPtr, RgnHandle rgn)); /* 53 */
    void (*tkMacSetHelpMenuItemCount) _ANSI_ARGS_((void)); /* 54 */
    void (*tkMacSetScrollbarGrow) _ANSI_ARGS_((TkWindow * winPtr, int flag)); /* 55 */
    void (*tkMacSetUpClippingRgn) _ANSI_ARGS_((Drawable drawable)); /* 56 */
    void (*tkMacSetUpGraphicsPort) _ANSI_ARGS_((GC gc)); /* 57 */
    void (*tkMacUpdateClipRgn) _ANSI_ARGS_((TkWindow * winPtr)); /* 58 */
    void (*tkMacUnregisterMacWindow) _ANSI_ARGS_((GWorldPtr portPtr)); /* 59 */
    int (*tkMacUseMenuID) _ANSI_ARGS_((short macID)); /* 60 */
    RgnHandle (*tkMacVisableClipRgn) _ANSI_ARGS_((TkWindow * winPtr)); /* 61 */
    void (*tkMacWinBounds) _ANSI_ARGS_((TkWindow * winPtr, Rect * geometry)); /* 62 */
    void (*tkMacWindowOffset) _ANSI_ARGS_((WindowRef wRef, int * xOffset, int * yOffset)); /* 63 */
    void (*tkResumeClipboard) _ANSI_ARGS_((void)); /* 64 */
    int (*tkSetMacColor) _ANSI_ARGS_((unsigned long pixel, RGBColor * macColor)); /* 65 */
    void (*tkSetWMName) _ANSI_ARGS_((TkWindow * winPtr, Tk_Uid titleUid)); /* 66 */
    void (*tkSuspendClipboard) _ANSI_ARGS_((void)); /* 67 */
    int (*tkWMGrowToplevel) _ANSI_ARGS_((WindowRef whichWindow, Point start)); /* 68 */
    int (*tkMacZoomToplevel) _ANSI_ARGS_((WindowPtr whichWindow, Point where, short zoomPart)); /* 69 */
    Tk_Window (*tk_TopCoordsToWindow) _ANSI_ARGS_((Tk_Window tkwin, int rootX, int rootY, int * newX, int * newY)); /* 70 */
    MacDrawable * (*tkMacContainerId) _ANSI_ARGS_((TkWindow * winPtr)); /* 71 */
    MacDrawable * (*tkMacGetHostToplevel) _ANSI_ARGS_((TkWindow * winPtr)); /* 72 */
#endif /* MAC_TCL */
} TkIntPlatStubs;

extern TkIntPlatStubs *tkIntPlatStubsPtr;

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
#ifndef TkAlignImageData
#define TkAlignImageData(image, alignment, bitOrder) \
	(tkIntPlatStubsPtr->tkAlignImageData)(image, alignment, bitOrder) /* 0 */
#endif
#ifndef TkClipBox
#define TkClipBox(rgn, rect_return) \
	(tkIntPlatStubsPtr->tkClipBox)(rgn, rect_return) /* 1 */
#endif
#ifndef TkCreateRegion
#define TkCreateRegion() \
	(tkIntPlatStubsPtr->tkCreateRegion)() /* 2 */
#endif
#ifndef TkDestroyRegion
#define TkDestroyRegion(rgn) \
	(tkIntPlatStubsPtr->tkDestroyRegion)(rgn) /* 3 */
#endif
#ifndef TkGenerateActivateEvents
#define TkGenerateActivateEvents(winPtr, active) \
	(tkIntPlatStubsPtr->tkGenerateActivateEvents)(winPtr, active) /* 4 */
#endif
#ifndef TkIntersectRegion
#define TkIntersectRegion(sra, srcb, dr_return) \
	(tkIntPlatStubsPtr->tkIntersectRegion)(sra, srcb, dr_return) /* 5 */
#endif
#ifndef TkpGetMS
#define TkpGetMS() \
	(tkIntPlatStubsPtr->tkpGetMS)() /* 6 */
#endif
#ifndef TkPointerDeadWindow
#define TkPointerDeadWindow(winPtr) \
	(tkIntPlatStubsPtr->tkPointerDeadWindow)(winPtr) /* 7 */
#endif
#ifndef TkpPrintWindowId
#define TkpPrintWindowId(buf, window) \
	(tkIntPlatStubsPtr->tkpPrintWindowId)(buf, window) /* 8 */
#endif
#ifndef TkpScanWindowId
#define TkpScanWindowId(interp, string, idPtr) \
	(tkIntPlatStubsPtr->tkpScanWindowId)(interp, string, idPtr) /* 9 */
#endif
/* Slot 10 is reserved */
#ifndef TkpSetCapture
#define TkpSetCapture(winPtr) \
	(tkIntPlatStubsPtr->tkpSetCapture)(winPtr) /* 11 */
#endif
#ifndef TkpSetCursor
#define TkpSetCursor(cursor) \
	(tkIntPlatStubsPtr->tkpSetCursor)(cursor) /* 12 */
#endif
#ifndef TkpWmSetState
#define TkpWmSetState(winPtr, state) \
	(tkIntPlatStubsPtr->tkpWmSetState)(winPtr, state) /* 13 */
#endif
#ifndef TkRectInRegion
#define TkRectInRegion(rgn, x, y, width, height) \
	(tkIntPlatStubsPtr->tkRectInRegion)(rgn, x, y, width, height) /* 14 */
#endif
#ifndef TkSetPixmapColormap
#define TkSetPixmapColormap(pixmap, colormap) \
	(tkIntPlatStubsPtr->tkSetPixmapColormap)(pixmap, colormap) /* 15 */
#endif
#ifndef TkSetRegion
#define TkSetRegion(display, gc, rgn) \
	(tkIntPlatStubsPtr->tkSetRegion)(display, gc, rgn) /* 16 */
#endif
#ifndef TkUnionRectWithRegion
#define TkUnionRectWithRegion(rect, src, dr_return) \
	(tkIntPlatStubsPtr->tkUnionRectWithRegion)(rect, src, dr_return) /* 17 */
#endif
#ifndef TkWinCancelMouseTimer
#define TkWinCancelMouseTimer() \
	(tkIntPlatStubsPtr->tkWinCancelMouseTimer)() /* 18 */
#endif
/* Slot 19 is reserved */
#ifndef TkWinClipboardRender
#define TkWinClipboardRender(dispPtr, format) \
	(tkIntPlatStubsPtr->tkWinClipboardRender)(dispPtr, format) /* 20 */
#endif
#ifndef TkWinEmbeddedEventProc
#define TkWinEmbeddedEventProc(hwnd, message, wParam, lParam) \
	(tkIntPlatStubsPtr->tkWinEmbeddedEventProc)(hwnd, message, wParam, lParam) /* 21 */
#endif
#ifndef TkWinFillRect
#define TkWinFillRect(dc, x, y, width, height, pixel) \
	(tkIntPlatStubsPtr->tkWinFillRect)(dc, x, y, width, height, pixel) /* 22 */
#endif
#ifndef TkWinGetBorderPixels
#define TkWinGetBorderPixels(tkwin, border, which) \
	(tkIntPlatStubsPtr->tkWinGetBorderPixels)(tkwin, border, which) /* 23 */
#endif
#ifndef TkWinGetDrawableDC
#define TkWinGetDrawableDC(display, d, state) \
	(tkIntPlatStubsPtr->tkWinGetDrawableDC)(display, d, state) /* 24 */
#endif
#ifndef TkWinGetModifierState
#define TkWinGetModifierState() \
	(tkIntPlatStubsPtr->tkWinGetModifierState)() /* 25 */
#endif
#ifndef TkWinGetSystemPalette
#define TkWinGetSystemPalette() \
	(tkIntPlatStubsPtr->tkWinGetSystemPalette)() /* 26 */
#endif
#ifndef TkWinGetWrapperWindow
#define TkWinGetWrapperWindow(tkwin) \
	(tkIntPlatStubsPtr->tkWinGetWrapperWindow)(tkwin) /* 27 */
#endif
#ifndef TkWinHandleMenuEvent
#define TkWinHandleMenuEvent(phwnd, pMessage, pwParam, plParam, plResult) \
	(tkIntPlatStubsPtr->tkWinHandleMenuEvent)(phwnd, pMessage, pwParam, plParam, plResult) /* 28 */
#endif
#ifndef TkWinIndexOfColor
#define TkWinIndexOfColor(colorPtr) \
	(tkIntPlatStubsPtr->tkWinIndexOfColor)(colorPtr) /* 29 */
#endif
#ifndef TkWinPointerDeadWindow
#define TkWinPointerDeadWindow(winPtr) \
	(tkIntPlatStubsPtr->tkWinPointerDeadWindow)(winPtr) /* 30 */
#endif
#ifndef TkWinPointerEvent
#define TkWinPointerEvent(hwnd, x, y) \
	(tkIntPlatStubsPtr->tkWinPointerEvent)(hwnd, x, y) /* 31 */
#endif
#ifndef TkWinPointerInit
#define TkWinPointerInit() \
	(tkIntPlatStubsPtr->tkWinPointerInit)() /* 32 */
#endif
#ifndef TkWinReflectMessage
#define TkWinReflectMessage(hwnd, message, wParam, lParam) \
	(tkIntPlatStubsPtr->tkWinReflectMessage)(hwnd, message, wParam, lParam) /* 33 */
#endif
#ifndef TkWinReleaseDrawableDC
#define TkWinReleaseDrawableDC(d, hdc, state) \
	(tkIntPlatStubsPtr->tkWinReleaseDrawableDC)(d, hdc, state) /* 34 */
#endif
#ifndef TkWinResendEvent
#define TkWinResendEvent(wndproc, hwnd, eventPtr) \
	(tkIntPlatStubsPtr->tkWinResendEvent)(wndproc, hwnd, eventPtr) /* 35 */
#endif
#ifndef TkWinSelectPalette
#define TkWinSelectPalette(dc, colormap) \
	(tkIntPlatStubsPtr->tkWinSelectPalette)(dc, colormap) /* 36 */
#endif
#ifndef TkWinSetMenu
#define TkWinSetMenu(tkwin, hMenu) \
	(tkIntPlatStubsPtr->tkWinSetMenu)(tkwin, hMenu) /* 37 */
#endif
#ifndef TkWinSetWindowPos
#define TkWinSetWindowPos(hwnd, siblingHwnd, pos) \
	(tkIntPlatStubsPtr->tkWinSetWindowPos)(hwnd, siblingHwnd, pos) /* 38 */
#endif
#ifndef TkWinUpdateCursor
#define TkWinUpdateCursor(winPtr) \
	(tkIntPlatStubsPtr->tkWinUpdateCursor)(winPtr) /* 39 */
#endif
#ifndef TkWinWmCleanup
#define TkWinWmCleanup(hInstance) \
	(tkIntPlatStubsPtr->tkWinWmCleanup)(hInstance) /* 40 */
#endif
#ifndef TkWinWmFindEmbedAssociation
#define TkWinWmFindEmbedAssociation(winPtr) \
	(tkIntPlatStubsPtr->tkWinWmFindEmbedAssociation)(winPtr) /* 41 */
#endif
#ifndef TkWinWmStoreEmbedAssociation
#define TkWinWmStoreEmbedAssociation(winPtr, hwnd) \
	(tkIntPlatStubsPtr->tkWinWmStoreEmbedAssociation)(winPtr, hwnd) /* 42 */
#endif
#ifndef TkWinXCleanup
#define TkWinXCleanup(hInstance) \
	(tkIntPlatStubsPtr->tkWinXCleanup)(hInstance) /* 43 */
#endif
#ifndef TkWinXInit
#define TkWinXInit(hInstance) \
	(tkIntPlatStubsPtr->tkWinXInit)(hInstance) /* 44 */
#endif
#endif /* __WIN32__ */
#if !defined(__WIN32__) && !defined(MAC_TCL)
#ifndef TkCreateXEventSource
#define TkCreateXEventSource() \
	(tkIntPlatStubsPtr->tkCreateXEventSource)() /* 0 */
#endif
#ifndef TkFreeWindowId
#define TkFreeWindowId(dispPtr, w) \
	(tkIntPlatStubsPtr->tkFreeWindowId)(dispPtr, w) /* 1 */
#endif
#ifndef TkInitXId
#define TkInitXId(dispPtr) \
	(tkIntPlatStubsPtr->tkInitXId)(dispPtr) /* 2 */
#endif
#ifndef TkpGetContainer
#define TkpGetContainer(embeddedPtr) \
	(tkIntPlatStubsPtr->tkpGetContainer)(embeddedPtr) /* 3 */
#endif
#ifndef TkpCmapStressed
#define TkpCmapStressed(tkwin, colormap) \
	(tkIntPlatStubsPtr->tkpCmapStressed)(tkwin, colormap) /* 4 */
#endif
#ifndef TkpSync
#define TkpSync(display) \
	(tkIntPlatStubsPtr->tkpSync)(display) /* 5 */
#endif
#ifndef TkUnixContainerId
#define TkUnixContainerId(winPtr) \
	(tkIntPlatStubsPtr->tkUnixContainerId)(winPtr) /* 6 */
#endif
#ifndef TkUnixDoOneXEvent
#define TkUnixDoOneXEvent(timePtr) \
	(tkIntPlatStubsPtr->tkUnixDoOneXEvent)(timePtr) /* 7 */
#endif
#ifndef TkUnixSetMenubar
#define TkUnixSetMenubar(tkwin, menubar) \
	(tkIntPlatStubsPtr->tkUnixSetMenubar)(tkwin, menubar) /* 8 */
#endif
#endif /* UNIX */
#ifdef MAC_TCL
#ifndef TkClipBox
#define TkClipBox(rgn, rect_return) \
	(tkIntPlatStubsPtr->tkClipBox)(rgn, rect_return) /* 0 */
#endif
#ifndef TkCreateRegion
#define TkCreateRegion() \
	(tkIntPlatStubsPtr->tkCreateRegion)() /* 1 */
#endif
#ifndef TkDestroyRegion
#define TkDestroyRegion(rgn) \
	(tkIntPlatStubsPtr->tkDestroyRegion)(rgn) /* 2 */
#endif
#ifndef TkGenerateActivateEvents
#define TkGenerateActivateEvents(winPtr, active) \
	(tkIntPlatStubsPtr->tkGenerateActivateEvents)(winPtr, active) /* 3 */
#endif
#ifndef TkIntersectRegion
#define TkIntersectRegion(sra, srcb, dr_return) \
	(tkIntPlatStubsPtr->tkIntersectRegion)(sra, srcb, dr_return) /* 4 */
#endif
#ifndef TkpCreateNativeBitmap
#define TkpCreateNativeBitmap(display, source) \
	(tkIntPlatStubsPtr->tkpCreateNativeBitmap)(display, source) /* 5 */
#endif
#ifndef TkpDefineNativeBitmaps
#define TkpDefineNativeBitmaps() \
	(tkIntPlatStubsPtr->tkpDefineNativeBitmaps)() /* 6 */
#endif
#ifndef TkpGetMS
#define TkpGetMS() \
	(tkIntPlatStubsPtr->tkpGetMS)() /* 7 */
#endif
#ifndef TkpGetNativeAppBitmap
#define TkpGetNativeAppBitmap(display, name, width, height) \
	(tkIntPlatStubsPtr->tkpGetNativeAppBitmap)(display, name, width, height) /* 8 */
#endif
#ifndef TkPointerDeadWindow
#define TkPointerDeadWindow(winPtr) \
	(tkIntPlatStubsPtr->tkPointerDeadWindow)(winPtr) /* 9 */
#endif
#ifndef TkpSetCapture
#define TkpSetCapture(winPtr) \
	(tkIntPlatStubsPtr->tkpSetCapture)(winPtr) /* 10 */
#endif
#ifndef TkpSetCursor
#define TkpSetCursor(cursor) \
	(tkIntPlatStubsPtr->tkpSetCursor)(cursor) /* 11 */
#endif
/* Slot 12 is reserved */
#ifndef TkpWmSetState
#define TkpWmSetState(winPtr, state) \
	(tkIntPlatStubsPtr->tkpWmSetState)(winPtr, state) /* 13 */
#endif
#ifndef TkRectInRegion
#define TkRectInRegion(rgn, x, y, width, height) \
	(tkIntPlatStubsPtr->tkRectInRegion)(rgn, x, y, width, height) /* 14 */
#endif
#ifndef TkSetRegion
#define TkSetRegion(display, gc, rgn) \
	(tkIntPlatStubsPtr->tkSetRegion)(display, gc, rgn) /* 15 */
#endif
#ifndef TkUnionRectWithRegion
#define TkUnionRectWithRegion(rect, src, dr_return) \
	(tkIntPlatStubsPtr->tkUnionRectWithRegion)(rect, src, dr_return) /* 16 */
#endif
#ifndef HandleWMEvent
#define HandleWMEvent(theEvent) \
	(tkIntPlatStubsPtr->handleWMEvent)(theEvent) /* 17 */
#endif
#ifndef TkAboutDlg
#define TkAboutDlg() \
	(tkIntPlatStubsPtr->tkAboutDlg)() /* 18 */
#endif
#ifndef TkCreateMacEventSource
#define TkCreateMacEventSource() \
	(tkIntPlatStubsPtr->tkCreateMacEventSource)() /* 19 */
#endif
#ifndef TkFontList
#define TkFontList(interp, display) \
	(tkIntPlatStubsPtr->tkFontList)(interp, display) /* 20 */
#endif
#ifndef TkGetTransientMaster
#define TkGetTransientMaster(winPtr) \
	(tkIntPlatStubsPtr->tkGetTransientMaster)(winPtr) /* 21 */
#endif
#ifndef TkGenerateButtonEvent
#define TkGenerateButtonEvent(x, y, window, state) \
	(tkIntPlatStubsPtr->tkGenerateButtonEvent)(x, y, window, state) /* 22 */
#endif
#ifndef TkGetCharPositions
#define TkGetCharPositions(font_struct, string, count, buffer) \
	(tkIntPlatStubsPtr->tkGetCharPositions)(font_struct, string, count, buffer) /* 23 */
#endif
#ifndef TkGenWMDestroyEvent
#define TkGenWMDestroyEvent(tkwin) \
	(tkIntPlatStubsPtr->tkGenWMDestroyEvent)(tkwin) /* 24 */
#endif
#ifndef TkGenWMConfigureEvent
#define TkGenWMConfigureEvent(tkwin, x, y, width, height, flags) \
	(tkIntPlatStubsPtr->tkGenWMConfigureEvent)(tkwin, x, y, width, height, flags) /* 25 */
#endif
#ifndef TkMacButtonKeyState
#define TkMacButtonKeyState() \
	(tkIntPlatStubsPtr->tkMacButtonKeyState)() /* 26 */
#endif
#ifndef TkMacClearMenubarActive
#define TkMacClearMenubarActive() \
	(tkIntPlatStubsPtr->tkMacClearMenubarActive)() /* 27 */
#endif
#ifndef TkMacConvertEvent
#define TkMacConvertEvent(eventPtr) \
	(tkIntPlatStubsPtr->tkMacConvertEvent)(eventPtr) /* 28 */
#endif
#ifndef TkMacDispatchMenuEvent
#define TkMacDispatchMenuEvent(menuID, index) \
	(tkIntPlatStubsPtr->tkMacDispatchMenuEvent)(menuID, index) /* 29 */
#endif
#ifndef TkMacInstallCursor
#define TkMacInstallCursor(resizeOverride) \
	(tkIntPlatStubsPtr->tkMacInstallCursor)(resizeOverride) /* 30 */
#endif
#ifndef TkMacConvertTkEvent
#define TkMacConvertTkEvent(eventPtr, window) \
	(tkIntPlatStubsPtr->tkMacConvertTkEvent)(eventPtr, window) /* 31 */
#endif
#ifndef TkMacHandleTearoffMenu
#define TkMacHandleTearoffMenu() \
	(tkIntPlatStubsPtr->tkMacHandleTearoffMenu)() /* 32 */
#endif
#ifndef tkMacInstallMWConsole
#define tkMacInstallMWConsole(interp) \
	(tkIntPlatStubsPtr->tkMacInstallMWConsole)(interp) /* 33 */
#endif
#ifndef TkMacInvalClipRgns
#define TkMacInvalClipRgns(winPtr) \
	(tkIntPlatStubsPtr->tkMacInvalClipRgns)(winPtr) /* 34 */
#endif
#ifndef TkMacDoHLEvent
#define TkMacDoHLEvent(theEvent) \
	(tkIntPlatStubsPtr->tkMacDoHLEvent)(theEvent) /* 35 */
#endif
#ifndef TkMacFontInfo
#define TkMacFontInfo(fontId, family, style, size) \
	(tkIntPlatStubsPtr->tkMacFontInfo)(fontId, family, style, size) /* 36 */
#endif
#ifndef TkMacGenerateTime
#define TkMacGenerateTime() \
	(tkIntPlatStubsPtr->tkMacGenerateTime)() /* 37 */
#endif
#ifndef TkMacGetDrawablePort
#define TkMacGetDrawablePort(drawable) \
	(tkIntPlatStubsPtr->tkMacGetDrawablePort)(drawable) /* 38 */
#endif
#ifndef TkMacGetScrollbarGrowWindow
#define TkMacGetScrollbarGrowWindow(winPtr) \
	(tkIntPlatStubsPtr->tkMacGetScrollbarGrowWindow)(winPtr) /* 39 */
#endif
#ifndef TkMacGetXWindow
#define TkMacGetXWindow(macWinPtr) \
	(tkIntPlatStubsPtr->tkMacGetXWindow)(macWinPtr) /* 40 */
#endif
#ifndef TkMacGrowToplevel
#define TkMacGrowToplevel(whichWindow, start) \
	(tkIntPlatStubsPtr->tkMacGrowToplevel)(whichWindow, start) /* 41 */
#endif
#ifndef TkMacHandleMenuSelect
#define TkMacHandleMenuSelect(mResult, optionKeyPressed) \
	(tkIntPlatStubsPtr->tkMacHandleMenuSelect)(mResult, optionKeyPressed) /* 42 */
#endif
#ifndef TkMacHaveAppearance
#define TkMacHaveAppearance() \
	(tkIntPlatStubsPtr->tkMacHaveAppearance)() /* 43 */
#endif
#ifndef TkMacInitAppleEvents
#define TkMacInitAppleEvents(interp) \
	(tkIntPlatStubsPtr->tkMacInitAppleEvents)(interp) /* 44 */
#endif
#ifndef TkMacInitMenus
#define TkMacInitMenus(interp) \
	(tkIntPlatStubsPtr->tkMacInitMenus)(interp) /* 45 */
#endif
#ifndef TkMacInvalidateWindow
#define TkMacInvalidateWindow(macWin, flag) \
	(tkIntPlatStubsPtr->tkMacInvalidateWindow)(macWin, flag) /* 46 */
#endif
#ifndef TkMacIsCharacterMissing
#define TkMacIsCharacterMissing(tkfont, searchChar) \
	(tkIntPlatStubsPtr->tkMacIsCharacterMissing)(tkfont, searchChar) /* 47 */
#endif
#ifndef TkMacMakeRealWindowExist
#define TkMacMakeRealWindowExist(winPtr) \
	(tkIntPlatStubsPtr->tkMacMakeRealWindowExist)(winPtr) /* 48 */
#endif
#ifndef TkMacMakeStippleMap
#define TkMacMakeStippleMap(d1, d2) \
	(tkIntPlatStubsPtr->tkMacMakeStippleMap)(d1, d2) /* 49 */
#endif
#ifndef TkMacMenuClick
#define TkMacMenuClick() \
	(tkIntPlatStubsPtr->tkMacMenuClick)() /* 50 */
#endif
#ifndef TkMacRegisterOffScreenWindow
#define TkMacRegisterOffScreenWindow(window, portPtr) \
	(tkIntPlatStubsPtr->tkMacRegisterOffScreenWindow)(window, portPtr) /* 51 */
#endif
#ifndef TkMacResizable
#define TkMacResizable(winPtr) \
	(tkIntPlatStubsPtr->tkMacResizable)(winPtr) /* 52 */
#endif
#ifndef TkMacSetEmbedRgn
#define TkMacSetEmbedRgn(winPtr, rgn) \
	(tkIntPlatStubsPtr->tkMacSetEmbedRgn)(winPtr, rgn) /* 53 */
#endif
#ifndef TkMacSetHelpMenuItemCount
#define TkMacSetHelpMenuItemCount() \
	(tkIntPlatStubsPtr->tkMacSetHelpMenuItemCount)() /* 54 */
#endif
#ifndef TkMacSetScrollbarGrow
#define TkMacSetScrollbarGrow(winPtr, flag) \
	(tkIntPlatStubsPtr->tkMacSetScrollbarGrow)(winPtr, flag) /* 55 */
#endif
#ifndef TkMacSetUpClippingRgn
#define TkMacSetUpClippingRgn(drawable) \
	(tkIntPlatStubsPtr->tkMacSetUpClippingRgn)(drawable) /* 56 */
#endif
#ifndef TkMacSetUpGraphicsPort
#define TkMacSetUpGraphicsPort(gc) \
	(tkIntPlatStubsPtr->tkMacSetUpGraphicsPort)(gc) /* 57 */
#endif
#ifndef TkMacUpdateClipRgn
#define TkMacUpdateClipRgn(winPtr) \
	(tkIntPlatStubsPtr->tkMacUpdateClipRgn)(winPtr) /* 58 */
#endif
#ifndef TkMacUnregisterMacWindow
#define TkMacUnregisterMacWindow(portPtr) \
	(tkIntPlatStubsPtr->tkMacUnregisterMacWindow)(portPtr) /* 59 */
#endif
#ifndef TkMacUseMenuID
#define TkMacUseMenuID(macID) \
	(tkIntPlatStubsPtr->tkMacUseMenuID)(macID) /* 60 */
#endif
#ifndef TkMacVisableClipRgn
#define TkMacVisableClipRgn(winPtr) \
	(tkIntPlatStubsPtr->tkMacVisableClipRgn)(winPtr) /* 61 */
#endif
#ifndef TkMacWinBounds
#define TkMacWinBounds(winPtr, geometry) \
	(tkIntPlatStubsPtr->tkMacWinBounds)(winPtr, geometry) /* 62 */
#endif
#ifndef TkMacWindowOffset
#define TkMacWindowOffset(wRef, xOffset, yOffset) \
	(tkIntPlatStubsPtr->tkMacWindowOffset)(wRef, xOffset, yOffset) /* 63 */
#endif
#ifndef TkResumeClipboard
#define TkResumeClipboard() \
	(tkIntPlatStubsPtr->tkResumeClipboard)() /* 64 */
#endif
#ifndef TkSetMacColor
#define TkSetMacColor(pixel, macColor) \
	(tkIntPlatStubsPtr->tkSetMacColor)(pixel, macColor) /* 65 */
#endif
#ifndef TkSetWMName
#define TkSetWMName(winPtr, titleUid) \
	(tkIntPlatStubsPtr->tkSetWMName)(winPtr, titleUid) /* 66 */
#endif
#ifndef TkSuspendClipboard
#define TkSuspendClipboard() \
	(tkIntPlatStubsPtr->tkSuspendClipboard)() /* 67 */
#endif
#ifndef TkWMGrowToplevel
#define TkWMGrowToplevel(whichWindow, start) \
	(tkIntPlatStubsPtr->tkWMGrowToplevel)(whichWindow, start) /* 68 */
#endif
#ifndef TkMacZoomToplevel
#define TkMacZoomToplevel(whichWindow, where, zoomPart) \
	(tkIntPlatStubsPtr->tkMacZoomToplevel)(whichWindow, where, zoomPart) /* 69 */
#endif
#ifndef Tk_TopCoordsToWindow
#define Tk_TopCoordsToWindow(tkwin, rootX, rootY, newX, newY) \
	(tkIntPlatStubsPtr->tk_TopCoordsToWindow)(tkwin, rootX, rootY, newX, newY) /* 70 */
#endif
#ifndef TkMacContainerId
#define TkMacContainerId(winPtr) \
	(tkIntPlatStubsPtr->tkMacContainerId)(winPtr) /* 71 */
#endif
#ifndef TkMacGetHostToplevel
#define TkMacGetHostToplevel(winPtr) \
	(tkIntPlatStubsPtr->tkMacGetHostToplevel)(winPtr) /* 72 */
#endif
#endif /* MAC_TCL */

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKINTPLATDECLS */
