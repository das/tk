/*
 * tkIntXlibDecls.h --
 *
 *	This file contains the declarations for all platform dependent
 *	unsupported functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
 *
 * RCS: @(#) $Id$
 */

#ifndef _TKINTXLIBDECLS
#define _TKINTXLIBDECLS

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifdef __WIN32__
/* 0 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 1 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4));
/* 2 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
/* 3 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 4 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 5 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
				Visual* v, int i));
/* 6 */
EXTERN Cursor		XCreatePixmapCursor _ANSI_ARGS_((Display* d, 
				Pixmap p1, Pixmap p2, XColor* x1, XColor* x2, 
				unsigned int ui1, unsigned int ui2));
/* 7 */
EXTERN Cursor		XCreateGlyphCursor _ANSI_ARGS_((Display* d, Font f1, 
				Font f2, unsigned int ui1, unsigned int ui2, 
				XColor* x1, XColor* x2));
/* 8 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 9 */
EXTERN XHostAddress *	XListHosts _ANSI_ARGS_((Display* d, int* i, Bool* b));
/* 10 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, 
				unsigned int k, int i));
/* 11 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 12 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 13 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 14 */
EXTERN Status		XIconifyWindow _ANSI_ARGS_((Display* d, Window w, 
				int i));
/* 15 */
EXTERN Status		XWithdrawWindow _ANSI_ARGS_((Display* d, Window w, 
				int i));
/* 16 */
EXTERN Status		XGetWMColormapWindows _ANSI_ARGS_((Display* d, 
				Window w, Window** wpp, int* ip));
/* 17 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* xp));
/* 18 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 19 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
				_Xconst unsigned char* c, int i3));
/* 20 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes* x));
/* 21 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 22 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int i, XWindowChanges* x));
/* 23 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
/* 24 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
/* 25 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
				Cursor c));
/* 26 */
EXTERN void		XDeleteProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a));
/* 27 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 28 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 29 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2));
/* 30 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 31 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 32 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2, int i3));
/* 33 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XRectangle* x, int i));
/* 34 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* d, int i));
/* 35 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 36 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
				unsigned long* ulp, int i, unsigned long ul));
/* 37 */
EXTERN void		XFreeCursor _ANSI_ARGS_((Display* d, Cursor c));
/* 38 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 39 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
				unsigned int* ui3, unsigned int* ui4));
/* 40 */
EXTERN void		XGetInputFocus _ANSI_ARGS_((Display* d, Window* w, 
				int* i));
/* 41 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
				unsigned long* ulp2, unsigned char** cpp));
/* 42 */
EXTERN Status		XGetWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, XWindowAttributes* x));
/* 43 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
				Bool b, int i1, int i2, Time t));
/* 44 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
/* 45 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 46 */
EXTERN Status		XLookupColor _ANSI_ARGS_((Display* d, Colormap c1, 
				_Xconst char* c2, XColor* x1, XColor* x2));
/* 47 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 48 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 49 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2));
/* 50 */
EXTERN void		XNextEvent _ANSI_ARGS_((Display* d, XEvent* x));
/* 51 */
EXTERN void		XPutBackEvent _ANSI_ARGS_((Display* d, XEvent* x));
/* 52 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* x, int i));
/* 53 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
				int* i3, int* i4, unsigned int* ui));
/* 54 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
				unsigned int* ui));
/* 55 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 56 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 57 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int ui1, unsigned int ui2));
/* 58 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
				long l));
/* 59 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
				long l, XEvent* x));
/* 60 */
EXTERN void		XSetCommand _ANSI_ARGS_((Display* d, Window w, 
				char** c, int i));
/* 61 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
				_Xconst char* c));
/* 62 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
				int i, Time t));
/* 63 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
				Window w, Time t));
/* 64 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul));
/* 65 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 66 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
				unsigned long ul));
/* 67 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 68 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
				Window w, unsigned int ui));
/* 69 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
				Colormap c));
/* 70 */
EXTERN Bool		XTranslateCoordinates _ANSI_ARGS_((Display* d, 
				Window w1, Window w2, int i1, int i2, 
				int* i3, int* i4, Window* w3));
/* 71 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 72 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 73 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 74 */
EXTERN void		XWindowEvent _ANSI_ARGS_((Display* d, Window w, 
				long l, XEvent* x));
/* 75 */
EXTERN void		XDestroyIC _ANSI_ARGS_((XIC x));
/* 76 */
EXTERN Bool		XFilterEvent _ANSI_ARGS_((XEvent* x, Window w));
/* 77 */
EXTERN int		XmbLookupString _ANSI_ARGS_((XIC xi, 
				XKeyPressedEvent* xk, char* c, int i, 
				KeySym* k, Status* s));
/* 78 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height));
#endif /* __WIN32__ */
#ifdef MAC_TCL
/* 0 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 1 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4));
/* 2 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
/* 3 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 4 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 5 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
				Visual* v, int i));
/* 6 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 7 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k, 
				int i));
/* 8 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 9 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 10 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 11 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
				XColor* xp));
/* 12 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 13 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a, Atom a, int i1, int i2, 
				_Xconst unsigned char* c, int i3));
/* 14 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes* x));
/* 15 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int i, XWindowChanges* x));
/* 16 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
/* 17 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
/* 18 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
				Cursor c));
/* 19 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 20 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 21 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2));
/* 22 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 23 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
/* 24 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XPoint* x, int i1, int i2, int i3));
/* 25 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, XRectangle* x, int i));
/* 26 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 27 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
				unsigned long* ulp, int i, unsigned long ul));
/* 28 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 29 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
				unsigned int* ui3, unsigned int* ui4));
/* 30 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
				unsigned long* ulp2, unsigned char** cpp));
/* 31 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
				Bool b, int i1, int i2, Time t));
/* 32 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
/* 33 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 34 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 35 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
/* 36 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2));
/* 37 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
				int* i3, int* i4, unsigned int* ui));
/* 38 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 39 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 40 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				unsigned int ui1, unsigned int ui2));
/* 41 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
				long l));
/* 42 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
				long l, XEvent* x));
/* 43 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
				_Xconst char* c));
/* 44 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
				int i, Time t));
/* 45 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
				Window w, Time t));
/* 46 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul));
/* 47 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 48 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
				unsigned long ul));
/* 49 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
				Window w, Pixmap p));
/* 50 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
				Window w, unsigned int ui));
/* 51 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
				Colormap c));
/* 52 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 53 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 54 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 55 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height));
#endif /* MAC_TCL */

typedef struct TkIntXlibStubs {
    int magic;
    struct TkIntXlibStubHooks *hooks;

#ifdef __WIN32__
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 0 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 1 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 2 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 3 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 4 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 5 */
    Cursor (*xCreatePixmapCursor) _ANSI_ARGS_((Display* d, Pixmap p1, Pixmap p2, XColor* x1, XColor* x2, unsigned int ui1, unsigned int ui2)); /* 6 */
    Cursor (*xCreateGlyphCursor) _ANSI_ARGS_((Display* d, Font f1, Font f2, unsigned int ui1, unsigned int ui2, XColor* x1, XColor* x2)); /* 7 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 8 */
    XHostAddress * (*xListHosts) _ANSI_ARGS_((Display* d, int* i, Bool* b)); /* 9 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, unsigned int k, int i)); /* 10 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 11 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 12 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 13 */
    Status (*xIconifyWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 14 */
    Status (*xWithdrawWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 15 */
    Status (*xGetWMColormapWindows) _ANSI_ARGS_((Display* d, Window w, Window** wpp, int* ip)); /* 16 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 17 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 18 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 19 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 20 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 21 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 22 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 23 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 24 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 25 */
    void (*xDeleteProperty) _ANSI_ARGS_((Display* d, Window w, Atom a)); /* 26 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 27 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 28 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 29 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 30 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 31 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 32 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 33 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* d, int i)); /* 34 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 35 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 36 */
    void (*xFreeCursor) _ANSI_ARGS_((Display* d, Cursor c)); /* 37 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 38 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 39 */
    void (*xGetInputFocus) _ANSI_ARGS_((Display* d, Window* w, int* i)); /* 40 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 41 */
    Status (*xGetWindowAttributes) _ANSI_ARGS_((Display* d, Window w, XWindowAttributes* x)); /* 42 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 43 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 44 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 45 */
    Status (*xLookupColor) _ANSI_ARGS_((Display* d, Colormap c1, _Xconst char* c2, XColor* x1, XColor* x2)); /* 46 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 47 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 48 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 49 */
    void (*xNextEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 50 */
    void (*xPutBackEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 51 */
    void (*xQueryColors) _ANSI_ARGS_((Display* d, Colormap c, XColor* x, int i)); /* 52 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 53 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 54 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 55 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 56 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 57 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 58 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 59 */
    void (*xSetCommand) _ANSI_ARGS_((Display* d, Window w, char** c, int i)); /* 60 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 61 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 62 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 63 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 64 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 65 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 66 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 67 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 68 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 69 */
    Bool (*xTranslateCoordinates) _ANSI_ARGS_((Display* d, Window w1, Window w2, int i1, int i2, int* i3, int* i4, Window* w3)); /* 70 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 71 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 72 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 73 */
    void (*xWindowEvent) _ANSI_ARGS_((Display* d, Window w, long l, XEvent* x)); /* 74 */
    void (*xDestroyIC) _ANSI_ARGS_((XIC x)); /* 75 */
    Bool (*xFilterEvent) _ANSI_ARGS_((XEvent* x, Window w)); /* 76 */
    int (*xmbLookupString) _ANSI_ARGS_((XIC xi, XKeyPressedEvent* xk, char* c, int i, KeySym* k, Status* s)); /* 77 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 78 */
#endif /* __WIN32__ */
#ifdef MAC_TCL
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 0 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 1 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 2 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 3 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 4 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 5 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 6 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, KeyCode k, int i)); /* 7 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 8 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 9 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 10 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 11 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 12 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a, Atom a, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 13 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 14 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 15 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 16 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 17 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 18 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 19 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 20 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 21 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 22 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 23 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 24 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 25 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 26 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 27 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 28 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 29 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 30 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 31 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 32 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 33 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 34 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 35 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 36 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 37 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 38 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 39 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 40 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 41 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 42 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 43 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 44 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 45 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 46 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 47 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 50 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 51 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 52 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 53 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 54 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 55 */
#endif /* MAC_TCL */
} TkIntXlibStubs;

extern TkIntXlibStubs *tkIntXlibStubsPtr;

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
#ifndef XGetModifierMapping
#define XGetModifierMapping(d) \
	(tkIntXlibStubsPtr->xGetModifierMapping)(d) /* 0 */
#endif
#ifndef XCreateImage
#define XCreateImage(d, v, ui1, i1, i2, cp, ui2, ui3, i3, i4) \
	(tkIntXlibStubsPtr->xCreateImage)(d, v, ui1, i1, i2, cp, ui2, ui3, i3, i4) /* 1 */
#endif
#ifndef XGetImage
#define XGetImage(d, dr, i1, i2, ui1, ui2, ul, i3) \
	(tkIntXlibStubsPtr->xGetImage)(d, dr, i1, i2, ui1, ui2, ul, i3) /* 2 */
#endif
#ifndef XGetAtomName
#define XGetAtomName(d, a) \
	(tkIntXlibStubsPtr->xGetAtomName)(d, a) /* 3 */
#endif
#ifndef XKeysymToString
#define XKeysymToString(k) \
	(tkIntXlibStubsPtr->xKeysymToString)(k) /* 4 */
#endif
#ifndef XCreateColormap
#define XCreateColormap(d, w, v, i) \
	(tkIntXlibStubsPtr->xCreateColormap)(d, w, v, i) /* 5 */
#endif
#ifndef XCreatePixmapCursor
#define XCreatePixmapCursor(d, p1, p2, x1, x2, ui1, ui2) \
	(tkIntXlibStubsPtr->xCreatePixmapCursor)(d, p1, p2, x1, x2, ui1, ui2) /* 6 */
#endif
#ifndef XCreateGlyphCursor
#define XCreateGlyphCursor(d, f1, f2, ui1, ui2, x1, x2) \
	(tkIntXlibStubsPtr->xCreateGlyphCursor)(d, f1, f2, ui1, ui2, x1, x2) /* 7 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC(g) \
	(tkIntXlibStubsPtr->xGContextFromGC)(g) /* 8 */
#endif
#ifndef XListHosts
#define XListHosts(d, i, b) \
	(tkIntXlibStubsPtr->xListHosts)(d, i, b) /* 9 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym(d, k, i) \
	(tkIntXlibStubsPtr->xKeycodeToKeysym)(d, k, i) /* 10 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym(c) \
	(tkIntXlibStubsPtr->xStringToKeysym)(c) /* 11 */
#endif
#ifndef XRootWindow
#define XRootWindow(d, i) \
	(tkIntXlibStubsPtr->xRootWindow)(d, i) /* 12 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler(x) \
	(tkIntXlibStubsPtr->xSetErrorHandler)(x) /* 13 */
#endif
#ifndef XIconifyWindow
#define XIconifyWindow(d, w, i) \
	(tkIntXlibStubsPtr->xIconifyWindow)(d, w, i) /* 14 */
#endif
#ifndef XWithdrawWindow
#define XWithdrawWindow(d, w, i) \
	(tkIntXlibStubsPtr->xWithdrawWindow)(d, w, i) /* 15 */
#endif
#ifndef XGetWMColormapWindows
#define XGetWMColormapWindows(d, w, wpp, ip) \
	(tkIntXlibStubsPtr->xGetWMColormapWindows)(d, w, wpp, ip) /* 16 */
#endif
#ifndef XAllocColor
#define XAllocColor(d, c, xp) \
	(tkIntXlibStubsPtr->xAllocColor)(d, c, xp) /* 17 */
#endif
#ifndef XBell
#define XBell(d, i) \
	(tkIntXlibStubsPtr->xBell)(d, i) /* 18 */
#endif
#ifndef XChangeProperty
#define XChangeProperty(d, w, a1, a2, i1, i2, c, i3) \
	(tkIntXlibStubsPtr->xChangeProperty)(d, w, a1, a2, i1, i2, c, i3) /* 19 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes(d, w, ul, x) \
	(tkIntXlibStubsPtr->xChangeWindowAttributes)(d, w, ul, x) /* 20 */
#endif
#ifndef XClearWindow
#define XClearWindow(d, w) \
	(tkIntXlibStubsPtr->xClearWindow)(d, w) /* 21 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow(d, w, i, x) \
	(tkIntXlibStubsPtr->xConfigureWindow)(d, w, i, x) /* 22 */
#endif
#ifndef XCopyArea
#define XCopyArea(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4) \
	(tkIntXlibStubsPtr->xCopyArea)(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4) /* 23 */
#endif
#ifndef XCopyPlane
#define XCopyPlane(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4, ul) \
	(tkIntXlibStubsPtr->xCopyPlane)(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4, ul) /* 24 */
#endif
#ifndef XDefineCursor
#define XDefineCursor(d, w, c) \
	(tkIntXlibStubsPtr->xDefineCursor)(d, w, c) /* 25 */
#endif
#ifndef XDeleteProperty
#define XDeleteProperty(d, w, a) \
	(tkIntXlibStubsPtr->xDeleteProperty)(d, w, a) /* 26 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow(d, w) \
	(tkIntXlibStubsPtr->xDestroyWindow)(d, w) /* 27 */
#endif
#ifndef XDrawArc
#define XDrawArc(d, dr, g, i1, i2, ui1, ui2, i3, i4) \
	(tkIntXlibStubsPtr->xDrawArc)(d, dr, g, i1, i2, ui1, ui2, i3, i4) /* 28 */
#endif
#ifndef XDrawLines
#define XDrawLines(d, dr, g, x, i1, i2) \
	(tkIntXlibStubsPtr->xDrawLines)(d, dr, g, x, i1, i2) /* 29 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle(d, dr, g, i1, i2, ui1, ui2) \
	(tkIntXlibStubsPtr->xDrawRectangle)(d, dr, g, i1, i2, ui1, ui2) /* 30 */
#endif
#ifndef XFillArc
#define XFillArc(d, dr, g, i1, i2, ui1, ui2, i3, i4) \
	(tkIntXlibStubsPtr->xFillArc)(d, dr, g, i1, i2, ui1, ui2, i3, i4) /* 31 */
#endif
#ifndef XFillPolygon
#define XFillPolygon(d, dr, g, x, i1, i2, i3) \
	(tkIntXlibStubsPtr->xFillPolygon)(d, dr, g, x, i1, i2, i3) /* 32 */
#endif
#ifndef XFillRectangles
#define XFillRectangles(d, dr, g, x, i) \
	(tkIntXlibStubsPtr->xFillRectangles)(d, dr, g, x, i) /* 33 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver(d, i) \
	(tkIntXlibStubsPtr->xForceScreenSaver)(d, i) /* 34 */
#endif
#ifndef XFreeColormap
#define XFreeColormap(d, c) \
	(tkIntXlibStubsPtr->xFreeColormap)(d, c) /* 35 */
#endif
#ifndef XFreeColors
#define XFreeColors(d, c, ulp, i, ul) \
	(tkIntXlibStubsPtr->xFreeColors)(d, c, ulp, i, ul) /* 36 */
#endif
#ifndef XFreeCursor
#define XFreeCursor(d, c) \
	(tkIntXlibStubsPtr->xFreeCursor)(d, c) /* 37 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap(x) \
	(tkIntXlibStubsPtr->xFreeModifiermap)(x) /* 38 */
#endif
#ifndef XGetGeometry
#define XGetGeometry(d, dr, w, i1, i2, ui1, ui2, ui3, ui4) \
	(tkIntXlibStubsPtr->xGetGeometry)(d, dr, w, i1, i2, ui1, ui2, ui3, ui4) /* 39 */
#endif
#ifndef XGetInputFocus
#define XGetInputFocus(d, w, i) \
	(tkIntXlibStubsPtr->xGetInputFocus)(d, w, i) /* 40 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty(d, w, a1, l1, l2, b, a2, ap, ip, ulp1, ulp2, cpp) \
	(tkIntXlibStubsPtr->xGetWindowProperty)(d, w, a1, l1, l2, b, a2, ap, ip, ulp1, ulp2, cpp) /* 41 */
#endif
#ifndef XGetWindowAttributes
#define XGetWindowAttributes(d, w, x) \
	(tkIntXlibStubsPtr->xGetWindowAttributes)(d, w, x) /* 42 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard(d, w, b, i1, i2, t) \
	(tkIntXlibStubsPtr->xGrabKeyboard)(d, w, b, i1, i2, t) /* 43 */
#endif
#ifndef XGrabPointer
#define XGrabPointer(d, w1, b, ui, i1, i2, w2, c, t) \
	(tkIntXlibStubsPtr->xGrabPointer)(d, w1, b, ui, i1, i2, w2, c, t) /* 44 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode(d, k) \
	(tkIntXlibStubsPtr->xKeysymToKeycode)(d, k) /* 45 */
#endif
#ifndef XLookupColor
#define XLookupColor(d, c1, c2, x1, x2) \
	(tkIntXlibStubsPtr->xLookupColor)(d, c1, c2, x1, x2) /* 46 */
#endif
#ifndef XMapWindow
#define XMapWindow(d, w) \
	(tkIntXlibStubsPtr->xMapWindow)(d, w) /* 47 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow(d, w, i1, i2, ui1, ui2) \
	(tkIntXlibStubsPtr->xMoveResizeWindow)(d, w, i1, i2, ui1, ui2) /* 48 */
#endif
#ifndef XMoveWindow
#define XMoveWindow(d, w, i1, i2) \
	(tkIntXlibStubsPtr->xMoveWindow)(d, w, i1, i2) /* 49 */
#endif
#ifndef XNextEvent
#define XNextEvent(d, x) \
	(tkIntXlibStubsPtr->xNextEvent)(d, x) /* 50 */
#endif
#ifndef XPutBackEvent
#define XPutBackEvent(d, x) \
	(tkIntXlibStubsPtr->xPutBackEvent)(d, x) /* 51 */
#endif
#ifndef XQueryColors
#define XQueryColors(d, c, x, i) \
	(tkIntXlibStubsPtr->xQueryColors)(d, c, x, i) /* 52 */
#endif
#ifndef XQueryPointer
#define XQueryPointer(d, w1, w2, w3, i1, i2, i3, i4, ui) \
	(tkIntXlibStubsPtr->xQueryPointer)(d, w1, w2, w3, i1, i2, i3, i4, ui) /* 53 */
#endif
#ifndef XQueryTree
#define XQueryTree(d, w1, w2, w3, w4, ui) \
	(tkIntXlibStubsPtr->xQueryTree)(d, w1, w2, w3, w4, ui) /* 54 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow(d, w) \
	(tkIntXlibStubsPtr->xRaiseWindow)(d, w) /* 55 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping(x) \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping)(x) /* 56 */
#endif
#ifndef XResizeWindow
#define XResizeWindow(d, w, ui1, ui2) \
	(tkIntXlibStubsPtr->xResizeWindow)(d, w, ui1, ui2) /* 57 */
#endif
#ifndef XSelectInput
#define XSelectInput(d, w, l) \
	(tkIntXlibStubsPtr->xSelectInput)(d, w, l) /* 58 */
#endif
#ifndef XSendEvent
#define XSendEvent(d, w, b, l, x) \
	(tkIntXlibStubsPtr->xSendEvent)(d, w, b, l, x) /* 59 */
#endif
#ifndef XSetCommand
#define XSetCommand(d, w, c, i) \
	(tkIntXlibStubsPtr->xSetCommand)(d, w, c, i) /* 60 */
#endif
#ifndef XSetIconName
#define XSetIconName(d, w, c) \
	(tkIntXlibStubsPtr->xSetIconName)(d, w, c) /* 61 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus(d, w, i, t) \
	(tkIntXlibStubsPtr->xSetInputFocus)(d, w, i, t) /* 62 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner(d, a, w, t) \
	(tkIntXlibStubsPtr->xSetSelectionOwner)(d, a, w, t) /* 63 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground(d, w, ul) \
	(tkIntXlibStubsPtr->xSetWindowBackground)(d, w, ul) /* 64 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap(d, w, p) \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap)(d, w, p) /* 65 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder(d, w, ul) \
	(tkIntXlibStubsPtr->xSetWindowBorder)(d, w, ul) /* 66 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap(d, w, p) \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap)(d, w, p) /* 67 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth(d, w, ui) \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth)(d, w, ui) /* 68 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap(d, w, c) \
	(tkIntXlibStubsPtr->xSetWindowColormap)(d, w, c) /* 69 */
#endif
#ifndef XTranslateCoordinates
#define XTranslateCoordinates(d, w1, w2, i1, i2, i3, i4, w3) \
	(tkIntXlibStubsPtr->xTranslateCoordinates)(d, w1, w2, i1, i2, i3, i4, w3) /* 70 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard(d, t) \
	(tkIntXlibStubsPtr->xUngrabKeyboard)(d, t) /* 71 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer(d, t) \
	(tkIntXlibStubsPtr->xUngrabPointer)(d, t) /* 72 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow(d, w) \
	(tkIntXlibStubsPtr->xUnmapWindow)(d, w) /* 73 */
#endif
#ifndef XWindowEvent
#define XWindowEvent(d, w, l, x) \
	(tkIntXlibStubsPtr->xWindowEvent)(d, w, l, x) /* 74 */
#endif
#ifndef XDestroyIC
#define XDestroyIC(x) \
	(tkIntXlibStubsPtr->xDestroyIC)(x) /* 75 */
#endif
#ifndef XFilterEvent
#define XFilterEvent(x, w) \
	(tkIntXlibStubsPtr->xFilterEvent)(x, w) /* 76 */
#endif
#ifndef XmbLookupString
#define XmbLookupString(xi, xk, c, i, k, s) \
	(tkIntXlibStubsPtr->xmbLookupString)(xi, xk, c, i, k, s) /* 77 */
#endif
#ifndef TkPutImage
#define TkPutImage(colors, ncolors, display, d, gc, image, src_x, src_y, dest_x, dest_y, width, height) \
	(tkIntXlibStubsPtr->tkPutImage)(colors, ncolors, display, d, gc, image, src_x, src_y, dest_x, dest_y, width, height) /* 78 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_TCL
#ifndef XGetModifierMapping
#define XGetModifierMapping(d) \
	(tkIntXlibStubsPtr->xGetModifierMapping)(d) /* 0 */
#endif
#ifndef XCreateImage
#define XCreateImage(d, v, ui1, i1, i2, cp, ui2, ui3, i3, i4) \
	(tkIntXlibStubsPtr->xCreateImage)(d, v, ui1, i1, i2, cp, ui2, ui3, i3, i4) /* 1 */
#endif
#ifndef XGetImage
#define XGetImage(d, dr, i1, i2, ui1, ui2, ul, i3) \
	(tkIntXlibStubsPtr->xGetImage)(d, dr, i1, i2, ui1, ui2, ul, i3) /* 2 */
#endif
#ifndef XGetAtomName
#define XGetAtomName(d, a) \
	(tkIntXlibStubsPtr->xGetAtomName)(d, a) /* 3 */
#endif
#ifndef XKeysymToString
#define XKeysymToString(k) \
	(tkIntXlibStubsPtr->xKeysymToString)(k) /* 4 */
#endif
#ifndef XCreateColormap
#define XCreateColormap(d, w, v, i) \
	(tkIntXlibStubsPtr->xCreateColormap)(d, w, v, i) /* 5 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC(g) \
	(tkIntXlibStubsPtr->xGContextFromGC)(g) /* 6 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym(d, k, i) \
	(tkIntXlibStubsPtr->xKeycodeToKeysym)(d, k, i) /* 7 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym(c) \
	(tkIntXlibStubsPtr->xStringToKeysym)(c) /* 8 */
#endif
#ifndef XRootWindow
#define XRootWindow(d, i) \
	(tkIntXlibStubsPtr->xRootWindow)(d, i) /* 9 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler(x) \
	(tkIntXlibStubsPtr->xSetErrorHandler)(x) /* 10 */
#endif
#ifndef XAllocColor
#define XAllocColor(d, c, xp) \
	(tkIntXlibStubsPtr->xAllocColor)(d, c, xp) /* 11 */
#endif
#ifndef XBell
#define XBell(d, i) \
	(tkIntXlibStubsPtr->xBell)(d, i) /* 12 */
#endif
#ifndef XChangeProperty
#define XChangeProperty(d, w, a, a, i1, i2, c, i3) \
	(tkIntXlibStubsPtr->xChangeProperty)(d, w, a, a, i1, i2, c, i3) /* 13 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes(d, w, ul, x) \
	(tkIntXlibStubsPtr->xChangeWindowAttributes)(d, w, ul, x) /* 14 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow(d, w, i, x) \
	(tkIntXlibStubsPtr->xConfigureWindow)(d, w, i, x) /* 15 */
#endif
#ifndef XCopyArea
#define XCopyArea(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4) \
	(tkIntXlibStubsPtr->xCopyArea)(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4) /* 16 */
#endif
#ifndef XCopyPlane
#define XCopyPlane(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4, ul) \
	(tkIntXlibStubsPtr->xCopyPlane)(d, dr1, dr2, g, i1, i2, ui1, ui2, i3, i4, ul) /* 17 */
#endif
#ifndef XDefineCursor
#define XDefineCursor(d, w, c) \
	(tkIntXlibStubsPtr->xDefineCursor)(d, w, c) /* 18 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow(d, w) \
	(tkIntXlibStubsPtr->xDestroyWindow)(d, w) /* 19 */
#endif
#ifndef XDrawArc
#define XDrawArc(d, dr, g, i1, i2, ui1, ui2, i3, i4) \
	(tkIntXlibStubsPtr->xDrawArc)(d, dr, g, i1, i2, ui1, ui2, i3, i4) /* 20 */
#endif
#ifndef XDrawLines
#define XDrawLines(d, dr, g, x, i1, i2) \
	(tkIntXlibStubsPtr->xDrawLines)(d, dr, g, x, i1, i2) /* 21 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle(d, dr, g, i1, i2, ui1, ui2) \
	(tkIntXlibStubsPtr->xDrawRectangle)(d, dr, g, i1, i2, ui1, ui2) /* 22 */
#endif
#ifndef XFillArc
#define XFillArc(d, dr, g, i1, i2, ui1, ui2, i3, i4) \
	(tkIntXlibStubsPtr->xFillArc)(d, dr, g, i1, i2, ui1, ui2, i3, i4) /* 23 */
#endif
#ifndef XFillPolygon
#define XFillPolygon(d, dr, g, x, i1, i2, i3) \
	(tkIntXlibStubsPtr->xFillPolygon)(d, dr, g, x, i1, i2, i3) /* 24 */
#endif
#ifndef XFillRectangles
#define XFillRectangles(d, dr, g, x, i) \
	(tkIntXlibStubsPtr->xFillRectangles)(d, dr, g, x, i) /* 25 */
#endif
#ifndef XFreeColormap
#define XFreeColormap(d, c) \
	(tkIntXlibStubsPtr->xFreeColormap)(d, c) /* 26 */
#endif
#ifndef XFreeColors
#define XFreeColors(d, c, ulp, i, ul) \
	(tkIntXlibStubsPtr->xFreeColors)(d, c, ulp, i, ul) /* 27 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap(x) \
	(tkIntXlibStubsPtr->xFreeModifiermap)(x) /* 28 */
#endif
#ifndef XGetGeometry
#define XGetGeometry(d, dr, w, i1, i2, ui1, ui2, ui3, ui4) \
	(tkIntXlibStubsPtr->xGetGeometry)(d, dr, w, i1, i2, ui1, ui2, ui3, ui4) /* 29 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty(d, w, a1, l1, l2, b, a2, ap, ip, ulp1, ulp2, cpp) \
	(tkIntXlibStubsPtr->xGetWindowProperty)(d, w, a1, l1, l2, b, a2, ap, ip, ulp1, ulp2, cpp) /* 30 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard(d, w, b, i1, i2, t) \
	(tkIntXlibStubsPtr->xGrabKeyboard)(d, w, b, i1, i2, t) /* 31 */
#endif
#ifndef XGrabPointer
#define XGrabPointer(d, w1, b, ui, i1, i2, w2, c, t) \
	(tkIntXlibStubsPtr->xGrabPointer)(d, w1, b, ui, i1, i2, w2, c, t) /* 32 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode(d, k) \
	(tkIntXlibStubsPtr->xKeysymToKeycode)(d, k) /* 33 */
#endif
#ifndef XMapWindow
#define XMapWindow(d, w) \
	(tkIntXlibStubsPtr->xMapWindow)(d, w) /* 34 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow(d, w, i1, i2, ui1, ui2) \
	(tkIntXlibStubsPtr->xMoveResizeWindow)(d, w, i1, i2, ui1, ui2) /* 35 */
#endif
#ifndef XMoveWindow
#define XMoveWindow(d, w, i1, i2) \
	(tkIntXlibStubsPtr->xMoveWindow)(d, w, i1, i2) /* 36 */
#endif
#ifndef XQueryPointer
#define XQueryPointer(d, w1, w2, w3, i1, i2, i3, i4, ui) \
	(tkIntXlibStubsPtr->xQueryPointer)(d, w1, w2, w3, i1, i2, i3, i4, ui) /* 37 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow(d, w) \
	(tkIntXlibStubsPtr->xRaiseWindow)(d, w) /* 38 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping(x) \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping)(x) /* 39 */
#endif
#ifndef XResizeWindow
#define XResizeWindow(d, w, ui1, ui2) \
	(tkIntXlibStubsPtr->xResizeWindow)(d, w, ui1, ui2) /* 40 */
#endif
#ifndef XSelectInput
#define XSelectInput(d, w, l) \
	(tkIntXlibStubsPtr->xSelectInput)(d, w, l) /* 41 */
#endif
#ifndef XSendEvent
#define XSendEvent(d, w, b, l, x) \
	(tkIntXlibStubsPtr->xSendEvent)(d, w, b, l, x) /* 42 */
#endif
#ifndef XSetIconName
#define XSetIconName(d, w, c) \
	(tkIntXlibStubsPtr->xSetIconName)(d, w, c) /* 43 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus(d, w, i, t) \
	(tkIntXlibStubsPtr->xSetInputFocus)(d, w, i, t) /* 44 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner(d, a, w, t) \
	(tkIntXlibStubsPtr->xSetSelectionOwner)(d, a, w, t) /* 45 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground(d, w, ul) \
	(tkIntXlibStubsPtr->xSetWindowBackground)(d, w, ul) /* 46 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap(d, w, p) \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap)(d, w, p) /* 47 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder(d, w, ul) \
	(tkIntXlibStubsPtr->xSetWindowBorder)(d, w, ul) /* 48 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap(d, w, p) \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap)(d, w, p) /* 49 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth(d, w, ui) \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth)(d, w, ui) /* 50 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap(d, w, c) \
	(tkIntXlibStubsPtr->xSetWindowColormap)(d, w, c) /* 51 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard(d, t) \
	(tkIntXlibStubsPtr->xUngrabKeyboard)(d, t) /* 52 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer(d, t) \
	(tkIntXlibStubsPtr->xUngrabPointer)(d, t) /* 53 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow(d, w) \
	(tkIntXlibStubsPtr->xUnmapWindow)(d, w) /* 54 */
#endif
#ifndef TkPutImage
#define TkPutImage(colors, ncolors, display, d, gc, image, src_x, src_y, dest_x, dest_y, width, height) \
	(tkIntXlibStubsPtr->tkPutImage)(colors, ncolors, display, d, gc, image, src_x, src_y, dest_x, dest_y, width, height) /* 55 */
#endif
#endif /* MAC_TCL */

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKINTXLIBDECLS */
